#line 1 "C:/Users/ARGE/Desktop/MicroC_Folder2/ST7735/fdene.c"
#line 1 "c:/users/arge/desktop/microc_folder2/st7735/st7735.h"
#line 1 "c:/users/public/documents/mikroelektronika/mikroc pro for pic/include/stdint.h"




typedef signed char int8_t;
typedef signed int int16_t;
typedef signed long int int32_t;


typedef unsigned char uint8_t;
typedef unsigned int uint16_t;
typedef unsigned long int uint32_t;


typedef signed char int_least8_t;
typedef signed int int_least16_t;
typedef signed long int int_least32_t;


typedef unsigned char uint_least8_t;
typedef unsigned int uint_least16_t;
typedef unsigned long int uint_least32_t;



typedef signed char int_fast8_t;
typedef signed int int_fast16_t;
typedef signed long int int_fast32_t;


typedef unsigned char uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned long int uint_fast32_t;


typedef signed int intptr_t;
typedef unsigned int uintptr_t;


typedef signed long int intmax_t;
typedef unsigned long int uintmax_t;
#line 1 "c:/users/public/documents/mikroelektronika/mikroc pro for pic/include/stdbool.h"



 typedef char _Bool;
#line 136 "c:/users/arge/desktop/microc_folder2/st7735/st7735.h"
uint8_t
 _width,
 _height,
 _xstart = 0,
 _ystart = 0,
 _colstart = 0,
 _rowstart = 0,
 tabcolor,
 rotation = 0;









const uint8_t
 Bcmd[] = {
 18,
  0x01 ,  0x80 ,
 50,
  0x11  ,  0x80 ,
 255,
  0x3A  , 1+ 0x80 ,
 0x05,
 10,
  0xB1 , 3+ 0x80 ,
 0x00,
 0x06,
 0x03,
 10,
  0x36  , 1,
 0x08,
  0xB6 , 2,
 0x15,

 0x02,
  0xB4  , 1,
 0x0,
  0xC0  , 2+ 0x80 ,
 0x02,
 0x70,
 10,
  0xC1  , 1,
 0x05,
  0xC2  , 2,
 0x01,
 0x02,
  0xC5  , 2+ 0x80 ,
 0x3C,
 0x38,
 10,
  0xFC  , 2,
 0x11, 0x15,
  0xE0 ,16,
 0x09, 0x16, 0x09, 0x20,
 0x21, 0x1B, 0x13, 0x19,
 0x17, 0x15, 0x1E, 0x2B,
 0x04, 0x05, 0x02, 0x0E,
  0xE1 ,16+ 0x80 ,
 0x0B, 0x14, 0x08, 0x1E,
 0x22, 0x1D, 0x18, 0x1E,
 0x1B, 0x1A, 0x24, 0x2B,
 0x06, 0x06, 0x02, 0x0F,
 10,
  0x2A  , 4,
 0x00, 0x02,
 0x00, 0x81,
  0x2B  , 4,
 0x00, 0x02,
 0x00, 0x81,
  0x13  ,  0x80 ,
 10,
  0x29  ,  0x80 ,
 255 },

 Rcmd1[] = {
 15,
  0x01 ,  0x80 ,
 150,
  0x11  ,  0x80 ,
 255,
  0xB1 , 3,
 0x01, 0x2C, 0x2D,
  0xB2 , 3,
 0x01, 0x2C, 0x2D,
  0xB3 , 6,
 0x01, 0x2C, 0x2D,
 0x01, 0x2C, 0x2D,
  0xB4  , 1,
 0x07,
  0xC0  , 3,
 0xA2,
 0x02,
 0x84,
  0xC1  , 1,
 0xC5,
  0xC2  , 2,
 0x0A,
 0x00,
  0xC3  , 2,
 0x8A,
 0x2A,
  0xC4  , 2,
 0x8A, 0xEE,
  0xC5  , 1,
 0x0E,
  0x20  , 0,
  0x36  , 1,
 0xC8,
  0x3A  , 1,
 0x05 },

 Rcmd2green[] = {
 2,
  0x2A  , 4,
 0x00, 0x02,
 0x00, 0x7F+0x02,
  0x2B  , 4,
 0x00, 0x01,
 0x00, 0x9F+0x01 },

 Rcmd2red[] = {
 2,
  0x2A  , 4,
 0x00, 0x00,
 0x00, 0x7F,
  0x2B  , 4,
 0x00, 0x00,
 0x00, 0x9F },

 Rcmd2green144[] = {
 2,
  0x2A  , 4,
 0x00, 0x00,
 0x00, 0x7F,
  0x2B  , 4,
 0x00, 0x00,
 0x00, 0x7F },

 Rcmd2green160x80[] = {
 2,
  0x2A  , 4,
 0x00, 0x00,
 0x00, 0x7F,
  0x2B  , 4,
 0x00, 0x00,
 0x00, 0x9F },

 Rcmd3[] = {
 4,
  0xE0 , 16 ,
 0x02, 0x1c, 0x07, 0x12,
 0x37, 0x32, 0x29, 0x2d,
 0x29, 0x25, 0x2B, 0x39,
 0x00, 0x01, 0x03, 0x10,
  0xE1 , 16 ,
 0x03, 0x1d, 0x07, 0x06,
 0x2E, 0x2C, 0x29, 0x2D,
 0x2E, 0x2E, 0x37, 0x3F,
 0x00, 0x00, 0x02, 0x10,
  0x13  ,  0x80 ,
 10,
  0x29  ,  0x80 ,
 100 };





void tft_initB(void);
void tft_initR(uint8_t options);

void drawPixel(uint8_t x, uint8_t y, uint16_t color);
void drawHLine(uint8_t x, uint8_t y, uint8_t w, uint16_t color);
void drawVLine(uint8_t x, uint8_t y, uint8_t h, uint16_t color);
void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color);
void fillScreen(uint16_t color);
void setRotation(uint8_t m);
void invertDisplay( _Bool  i);
void pushColor(uint16_t color);


void startWrite(void);
void endWrite(void);
void displayInit(const uint8_t *addr);
void writeCommand(uint8_t cmd);
void setAddrWindow(uint8_t x, uint8_t y, uint8_t w, uint8_t h);
#line 334 "c:/users/arge/desktop/microc_folder2/st7735/st7735.h"
void startWrite(void) {
  RD1_bit  = 0;
}
#line 345 "c:/users/arge/desktop/microc_folder2/st7735/st7735.h"
void endWrite(void) {
  RD1_bit  = 1;
}
#line 359 "c:/users/arge/desktop/microc_folder2/st7735/st7735.h"
void writeCommand(uint8_t cmd) {
  RD2_bit  = 0;
  SPI1_Write(cmd) ;
  RD2_bit  = 1;
}
#line 372 "c:/users/arge/desktop/microc_folder2/st7735/st7735.h"
void displayInit(const uint8_t *addr){
 uint8_t numCommands, numArgs;
 uint16_t ms;
 startWrite();

 numCommands = *addr++;

 while(numCommands--) {

 writeCommand(*addr++);
 numArgs = *addr++;
 ms = numArgs &  0x80 ;
 numArgs &= ~ 0x80 ;
 while(numArgs--) {
  SPI1_Write(*addr++) ;
 }

 if(ms) {
 ms = *addr++;
 if(ms == 255) ms = 500;
 while(ms--) delay_ms(1);
 }
 }
 endWrite();
}
#line 403 "c:/users/arge/desktop/microc_folder2/st7735/st7735.h"
void tft_initB(void) {

  RD0_bit  = 1;

  TRISD0_bit  = 0;

 delay_ms(100);
  RD0_bit  = 0;
 delay_ms(100);
  RD0_bit  = 1;
 delay_ms(200);


  RD1_bit  = 1;

  TRISD1_bit  = 0;



  TRISD2_bit  = 0;


 displayInit(Bcmd);
 setRotation(0);
}
#line 435 "c:/users/arge/desktop/microc_folder2/st7735/st7735.h"
void tft_initR(uint8_t options) {

  RD0_bit  = 1;

  TRISD0_bit  = 0;

 delay_ms(100);
  RD0_bit  = 0;
 delay_ms(100);
  RD0_bit  = 1;
 delay_ms(200);


  RD1_bit  = 1;

  TRISD1_bit  = 0;



  TRISD2_bit  = 0;


 displayInit(Rcmd1);
 if(options ==  0x00 ) {
 displayInit(Rcmd2green);
 _colstart = 2;
 _rowstart = 1;
 } else if((options ==  0x01 ) || (options ==  0x05 )) {
 _height =  128 ;
 _width =  128 ;
 displayInit(Rcmd2green144);
 _colstart = 2;
 _rowstart = 3;
 } else if(options ==  0x04 ) {
 _height =  160 ;
 _width =  80 ;
 displayInit(Rcmd2green160x80);
 _colstart = 24;
 _rowstart = 0;
 } else {

 displayInit(Rcmd2red);
 }
 displayInit(Rcmd3);


 if((options ==  0x02 ) || (options ==  0x04 )) {
 startWrite();
 writeCommand( 0x36 );
  SPI1_Write(0xC0) ;
 endWrite();
 }

 if(options ==  0x05 ) {

 tabcolor =  0x01 ;
 setRotation(2);
 } else {
 tabcolor = options;
 setRotation(0);
 }
}

void drawPixel(uint8_t x, uint8_t y, uint16_t color) {
 if((x < _width) && (y < _height)) {
 startWrite();
 setAddrWindow(x, y, 1, 1);
  SPI1_Write(color >> 8) ;
  SPI1_Write(color & 0xFF) ;
 endWrite();
 }
}
#line 517 "c:/users/arge/desktop/microc_folder2/st7735/st7735.h"
void setAddrWindow(uint8_t x, uint8_t y, uint8_t w, uint8_t h) {
 x += _xstart;
 y += _ystart;

 writeCommand( 0x2A );
  SPI1_Write(0) ;
  SPI1_Write(x) ;
  SPI1_Write(0) ;
  SPI1_Write(x+w-1) ;

 writeCommand( 0x2B );
  SPI1_Write(0) ;
  SPI1_Write(y) ;
  SPI1_Write(0) ;
  SPI1_Write(y+h-1) ;

 writeCommand( 0x2C );
}
#line 542 "c:/users/arge/desktop/microc_folder2/st7735/st7735.h"
void setRotation(uint8_t m) {
 uint8_t madctl = 0;

 rotation = m & 3;


 if((tabcolor ==  0x01 ) || (tabcolor ==  0x05 )) {

 _rowstart = (rotation < 2) ? 3 : 1;
 }

 switch (rotation) {
 case 0:
 if ((tabcolor ==  0x02 ) || (tabcolor ==  0x04 )) {
 madctl =  0x40  |  0x80  |  0x00 ;
 } else {
 madctl =  0x40  |  0x80  |  0x08 ;
 }

 if (tabcolor ==  0x01 ) {
 _height =  128 ;
 _width =  128 ;
 } else if (tabcolor ==  0x04 ) {
 _height =  160 ;
 _width =  80 ;
 } else {
 _height =  160 ;
 _width =  128 ;
 }
 _xstart = _colstart;
 _ystart = _rowstart;
 break;
 case 1:
 if ((tabcolor ==  0x02 ) || (tabcolor ==  0x04 )) {
 madctl =  0x80  |  0x20  |  0x00 ;
 } else {
 madctl =  0x80  |  0x20  |  0x08 ;
 }

 if (tabcolor ==  0x01 ) {
 _width =  128 ;
 _height =  128 ;
 } else if (tabcolor ==  0x04 ) {
 _width =  160 ;
 _height =  80 ;
 } else {
 _width =  160 ;
 _height =  128 ;
 }
 _ystart = _colstart;
 _xstart = _rowstart;
 break;
 case 2:
 if ((tabcolor ==  0x02 ) || (tabcolor ==  0x04 )) {
 madctl =  0x00 ;
 } else {
 madctl =  0x08 ;
 }

 if (tabcolor ==  0x01 ) {
 _height =  128 ;
 _width =  128 ;
 } else if (tabcolor ==  0x04 ) {
 _height =  160 ;
 _width =  80 ;
 } else {
 _height =  160 ;
 _width =  128 ;
 }
 _xstart = _colstart;
 _ystart = _rowstart;
 break;
 case 3:
 if ((tabcolor ==  0x02 ) || (tabcolor ==  0x04 )) {
 madctl =  0x40  |  0x20  |  0x00 ;
 } else {
 madctl =  0x40  |  0x20  |  0x08 ;
 }

 if (tabcolor ==  0x01 ) {
 _width =  128 ;
 _height =  128 ;
 } else if (tabcolor ==  0x04 ) {
 _width =  160 ;
 _height =  80 ;
 } else {
 _width =  160 ;
 _height =  128 ;
 }
 _ystart = _colstart;
 _xstart = _rowstart;
 break;
 }

 startWrite();
 writeCommand( 0x36 );
  SPI1_Write(madctl) ;
 endWrite();
}
#line 651 "c:/users/arge/desktop/microc_folder2/st7735/st7735.h"
void drawHLine(uint8_t x, uint8_t y, uint8_t w, uint16_t color) {
 if( (x < _width) && (y < _height) && w) {
 uint8_t hi = color >> 8, lo = color;

 if((x + w - 1) >= _width)
 w = _width - x;
 startWrite();
 setAddrWindow(x, y, w, 1);
 while (w--) {
  SPI1_Write(hi) ;
  SPI1_Write(lo) ;
 }
 endWrite();
 }
}
#line 676 "c:/users/arge/desktop/microc_folder2/st7735/st7735.h"
void drawVLine(uint8_t x, uint8_t y, uint8_t h, uint16_t color) {
 if( (x < _width) && (y < _height) && h) {
 uint8_t hi = color >> 8, lo = color;
 if((y + h - 1) >= _height)
 h = _height - y;
 startWrite();
 setAddrWindow(x, y, 1, h);
 while (h--) {
  SPI1_Write(hi) ;
  SPI1_Write(lo) ;
 }
 endWrite();
 }
}
#line 701 "c:/users/arge/desktop/microc_folder2/st7735/st7735.h"
void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color) {
 uint16_t px;
 if(w && h) {
 uint8_t hi = color >> 8, lo = color;
 if((x >= _width) || (y >= _height))
 return;
 if((x + w - 1) >= _width)
 w = _width - x;
 if((y + h - 1) >= _height)
 h = _height - y;
 startWrite();
 setAddrWindow(x, y, w, h);
 px = (uint16_t)w * h;
 while (px--) {
  SPI1_Write(hi) ;
  SPI1_Write(lo) ;
 }
 endWrite();
 }
}
#line 728 "c:/users/arge/desktop/microc_folder2/st7735/st7735.h"
void fillScreen(uint16_t color) {
 fillRect(0, 0, _width, _height, color);
}
#line 739 "c:/users/arge/desktop/microc_folder2/st7735/st7735.h"
void invertDisplay( _Bool  i) {
 startWrite();
 writeCommand(i ?  0x21  :  0x20 );
 endWrite();
}
#line 752 "c:/users/arge/desktop/microc_folder2/st7735/st7735.h"
void pushColor(uint16_t color) {
 uint8_t hi = color >> 8, lo = color;
 startWrite();
  SPI1_Write(hi) ;
  SPI1_Write(lo) ;
 endWrite();
}
#line 1 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
#line 1 "c:/users/public/documents/mikroelektronika/mikroc pro for pic/include/stdint.h"
#line 1 "c:/users/public/documents/mikroelektronika/mikroc pro for pic/include/stdbool.h"
#line 1 "c:/users/public/documents/mikroelektronika/mikroc pro for pic/include/stdarg.h"





typedef void * va_list[1];
#line 53 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void display_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);
void display_drawRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color);
void display_drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);
void display_drawCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t color);
void display_fillCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);
void display_fillCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t delta, uint16_t color);
void display_drawTriangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);
void display_fillTriangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);
void display_drawRoundRect(uint16_t x0, uint16_t y0, uint16_t w, uint16_t h, uint16_t radius, uint16_t color);
void display_fillRoundRect(uint16_t x0, uint16_t y0, uint16_t w, uint16_t h, uint16_t radius, uint16_t color);

void display_setCursor(uint16_t x, uint16_t y);
void display_setTextColor(uint16_t c, uint16_t bg);
void display_setTextSize(uint8_t s);
void display_setTextWrap( _Bool  w);
void display_putc(uint8_t c);
void display_puts(uint8_t *s);
void display_printf(const char *fmt, ...);
void display_customChar(const uint8_t *c);
void display_drawChar(uint16_t x, uint16_t y, uint8_t c, uint16_t color, uint16_t bg, uint8_t size);

uint8_t display_getRotation();
uint16_t getCursorX(void);
uint16_t getCursorY(void);
uint16_t display_getWidth();
uint16_t display_getHeight();
uint16_t display_color565(uint8_t red, uint8_t green, uint8_t blue);

void display_drawBitmapV1 (uint16_t x, uint16_t y, const uint8_t *bitmap, uint16_t w, uint16_t h, uint16_t color);
void display_drawBitmapV1_bg(uint16_t x, uint16_t y, const uint8_t *bitmap, uint16_t w, uint16_t h, uint16_t color, uint16_t bg);
void display_drawBitmapV2 (uint16_t x, uint16_t y, const uint8_t *bitmap, uint16_t w, uint16_t h, uint16_t color);
void display_drawBitmapV2_bg(uint16_t x, uint16_t y, const uint8_t *bitmap, uint16_t w, uint16_t h, uint16_t color, uint16_t bg);


void writeLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);
uint8_t printNumber(uint32_t n, int8_t n_width, uint8_t _flags);
void printFloat(float float_n, int8_t f_width, int8_t decimal, uint8_t _flags);
void v_printf(const char *fmt, va_list arp);
#line 112 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
int16_t
 cursor_x = 0,
 cursor_y = 0;
uint16_t
 textcolor = 0xFFFF,
 textbgcolor = 0xFFFF;
uint8_t
 textsize = 1;
 _Bool 
 wrap =  1 ;



static const uint8_t font[256][5] = {
 0x00, 0x00, 0x00, 0x00, 0x00,
 0x3E, 0x5B, 0x4F, 0x5B, 0x3E,
 0x3E, 0x6B, 0x4F, 0x6B, 0x3E,
 0x1C, 0x3E, 0x7C, 0x3E, 0x1C,
 0x18, 0x3C, 0x7E, 0x3C, 0x18,
 0x1C, 0x57, 0x7D, 0x57, 0x1C,
 0x1C, 0x5E, 0x7F, 0x5E, 0x1C,
 0x00, 0x18, 0x3C, 0x18, 0x00,
 0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
 0x00, 0x18, 0x24, 0x18, 0x00,
 0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
 0x30, 0x48, 0x3A, 0x06, 0x0E,
 0x26, 0x29, 0x79, 0x29, 0x26,
 0x40, 0x7F, 0x05, 0x05, 0x07,
 0x40, 0x7F, 0x05, 0x25, 0x3F,
 0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
 0x7F, 0x3E, 0x1C, 0x1C, 0x08,
 0x08, 0x1C, 0x1C, 0x3E, 0x7F,
 0x14, 0x22, 0x7F, 0x22, 0x14,
 0x5F, 0x5F, 0x00, 0x5F, 0x5F,
 0x06, 0x09, 0x7F, 0x01, 0x7F,
 0x00, 0x66, 0x89, 0x95, 0x6A,
 0x60, 0x60, 0x60, 0x60, 0x60,
 0x94, 0xA2, 0xFF, 0xA2, 0x94,
 0x08, 0x04, 0x7E, 0x04, 0x08,
 0x10, 0x20, 0x7E, 0x20, 0x10,
 0x08, 0x08, 0x2A, 0x1C, 0x08,
 0x08, 0x1C, 0x2A, 0x08, 0x08,
 0x1E, 0x10, 0x10, 0x10, 0x10,
 0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
 0x30, 0x38, 0x3E, 0x38, 0x30,
 0x06, 0x0E, 0x3E, 0x0E, 0x06,
 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x5F, 0x00, 0x00,
 0x00, 0x07, 0x00, 0x07, 0x00,
 0x14, 0x7F, 0x14, 0x7F, 0x14,
 0x24, 0x2A, 0x7F, 0x2A, 0x12,
 0x23, 0x13, 0x08, 0x64, 0x62,
 0x36, 0x49, 0x56, 0x20, 0x50,
 0x00, 0x08, 0x07, 0x03, 0x00,
 0x00, 0x1C, 0x22, 0x41, 0x00,
 0x00, 0x41, 0x22, 0x1C, 0x00,
 0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
 0x08, 0x08, 0x3E, 0x08, 0x08,
 0x00, 0x80, 0x70, 0x30, 0x00,
 0x08, 0x08, 0x08, 0x08, 0x08,
 0x00, 0x00, 0x60, 0x60, 0x00,
 0x20, 0x10, 0x08, 0x04, 0x02,
 0x3E, 0x51, 0x49, 0x45, 0x3E,
 0x00, 0x42, 0x7F, 0x40, 0x00,
 0x72, 0x49, 0x49, 0x49, 0x46,
 0x21, 0x41, 0x49, 0x4D, 0x33,
 0x18, 0x14, 0x12, 0x7F, 0x10,
 0x27, 0x45, 0x45, 0x45, 0x39,
 0x3C, 0x4A, 0x49, 0x49, 0x31,
 0x41, 0x21, 0x11, 0x09, 0x07,
 0x36, 0x49, 0x49, 0x49, 0x36,
 0x46, 0x49, 0x49, 0x29, 0x1E,
 0x00, 0x00, 0x14, 0x00, 0x00,
 0x00, 0x40, 0x34, 0x00, 0x00,
 0x00, 0x08, 0x14, 0x22, 0x41,
 0x14, 0x14, 0x14, 0x14, 0x14,
 0x00, 0x41, 0x22, 0x14, 0x08,
 0x02, 0x01, 0x59, 0x09, 0x06,
 0x3E, 0x41, 0x5D, 0x59, 0x4E,
 0x7C, 0x12, 0x11, 0x12, 0x7C,
 0x7F, 0x49, 0x49, 0x49, 0x36,
 0x3E, 0x41, 0x41, 0x41, 0x22,
 0x7F, 0x41, 0x41, 0x41, 0x3E,
 0x7F, 0x49, 0x49, 0x49, 0x41,
 0x7F, 0x09, 0x09, 0x09, 0x01,
 0x3E, 0x41, 0x41, 0x51, 0x73,
 0x7F, 0x08, 0x08, 0x08, 0x7F,
 0x00, 0x41, 0x7F, 0x41, 0x00,
 0x20, 0x40, 0x41, 0x3F, 0x01,
 0x7F, 0x08, 0x14, 0x22, 0x41,
 0x7F, 0x40, 0x40, 0x40, 0x40,
 0x7F, 0x02, 0x1C, 0x02, 0x7F,
 0x7F, 0x04, 0x08, 0x10, 0x7F,
 0x3E, 0x41, 0x41, 0x41, 0x3E,
 0x7F, 0x09, 0x09, 0x09, 0x06,
 0x3E, 0x41, 0x51, 0x21, 0x5E,
 0x7F, 0x09, 0x19, 0x29, 0x46,
 0x26, 0x49, 0x49, 0x49, 0x32,
 0x03, 0x01, 0x7F, 0x01, 0x03,
 0x3F, 0x40, 0x40, 0x40, 0x3F,
 0x1F, 0x20, 0x40, 0x20, 0x1F,
 0x3F, 0x40, 0x38, 0x40, 0x3F,
 0x63, 0x14, 0x08, 0x14, 0x63,
 0x03, 0x04, 0x78, 0x04, 0x03,
 0x61, 0x59, 0x49, 0x4D, 0x43,
 0x00, 0x7F, 0x41, 0x41, 0x41,
 0x02, 0x04, 0x08, 0x10, 0x20,
 0x00, 0x41, 0x41, 0x41, 0x7F,
 0x04, 0x02, 0x01, 0x02, 0x04,
 0x40, 0x40, 0x40, 0x40, 0x40,
 0x00, 0x03, 0x07, 0x08, 0x00,
 0x20, 0x54, 0x54, 0x78, 0x40,
 0x7F, 0x28, 0x44, 0x44, 0x38,
 0x38, 0x44, 0x44, 0x44, 0x28,
 0x38, 0x44, 0x44, 0x28, 0x7F,
 0x38, 0x54, 0x54, 0x54, 0x18,
 0x00, 0x08, 0x7E, 0x09, 0x02,
 0x18, 0xA4, 0xA4, 0x9C, 0x78,
 0x7F, 0x08, 0x04, 0x04, 0x78,
 0x00, 0x44, 0x7D, 0x40, 0x00,
 0x20, 0x40, 0x40, 0x3D, 0x00,
 0x7F, 0x10, 0x28, 0x44, 0x00,
 0x00, 0x41, 0x7F, 0x40, 0x00,
 0x7C, 0x04, 0x78, 0x04, 0x78,
 0x7C, 0x08, 0x04, 0x04, 0x78,
 0x38, 0x44, 0x44, 0x44, 0x38,
 0xFC, 0x18, 0x24, 0x24, 0x18,
 0x18, 0x24, 0x24, 0x18, 0xFC,
 0x7C, 0x08, 0x04, 0x04, 0x08,
 0x48, 0x54, 0x54, 0x54, 0x24,
 0x04, 0x04, 0x3F, 0x44, 0x24,
 0x3C, 0x40, 0x40, 0x20, 0x7C,
 0x1C, 0x20, 0x40, 0x20, 0x1C,
 0x3C, 0x40, 0x30, 0x40, 0x3C,
 0x44, 0x28, 0x10, 0x28, 0x44,
 0x4C, 0x90, 0x90, 0x90, 0x7C,
 0x44, 0x64, 0x54, 0x4C, 0x44,
 0x00, 0x08, 0x36, 0x41, 0x00,
 0x00, 0x00, 0x77, 0x00, 0x00,
 0x00, 0x41, 0x36, 0x08, 0x00,
 0x02, 0x01, 0x02, 0x04, 0x02,
 0x3C, 0x26, 0x23, 0x26, 0x3C,
 0x1E, 0xA1, 0xA1, 0x61, 0x12,
 0x3A, 0x40, 0x40, 0x20, 0x7A,
 0x38, 0x54, 0x54, 0x55, 0x59,
 0x21, 0x55, 0x55, 0x79, 0x41,
 0x22, 0x54, 0x54, 0x78, 0x42,
 0x21, 0x55, 0x54, 0x78, 0x40,
 0x20, 0x54, 0x55, 0x79, 0x40,
 0x0C, 0x1E, 0x52, 0x72, 0x12,
 0x39, 0x55, 0x55, 0x55, 0x59,
 0x39, 0x54, 0x54, 0x54, 0x59,
 0x39, 0x55, 0x54, 0x54, 0x58,
 0x00, 0x00, 0x45, 0x7C, 0x41,
 0x00, 0x02, 0x45, 0x7D, 0x42,
 0x00, 0x01, 0x45, 0x7C, 0x40,
 0x7D, 0x12, 0x11, 0x12, 0x7D,
 0xF0, 0x28, 0x25, 0x28, 0xF0,
 0x7C, 0x54, 0x55, 0x45, 0x00,
 0x20, 0x54, 0x54, 0x7C, 0x54,
 0x7C, 0x0A, 0x09, 0x7F, 0x49,
 0x32, 0x49, 0x49, 0x49, 0x32,
 0x3A, 0x44, 0x44, 0x44, 0x3A,
 0x32, 0x4A, 0x48, 0x48, 0x30,
 0x3A, 0x41, 0x41, 0x21, 0x7A,
 0x3A, 0x42, 0x40, 0x20, 0x78,
 0x00, 0x9D, 0xA0, 0xA0, 0x7D,
 0x3D, 0x42, 0x42, 0x42, 0x3D,
 0x3D, 0x40, 0x40, 0x40, 0x3D,
 0x3C, 0x24, 0xFF, 0x24, 0x24,
 0x48, 0x7E, 0x49, 0x43, 0x66,
 0x2B, 0x2F, 0xFC, 0x2F, 0x2B,
 0xFF, 0x09, 0x29, 0xF6, 0x20,
 0xC0, 0x88, 0x7E, 0x09, 0x03,
 0x20, 0x54, 0x54, 0x79, 0x41,
 0x00, 0x00, 0x44, 0x7D, 0x41,
 0x30, 0x48, 0x48, 0x4A, 0x32,
 0x38, 0x40, 0x40, 0x22, 0x7A,
 0x00, 0x7A, 0x0A, 0x0A, 0x72,
 0x7D, 0x0D, 0x19, 0x31, 0x7D,
 0x26, 0x29, 0x29, 0x2F, 0x28,
 0x26, 0x29, 0x29, 0x29, 0x26,
 0x30, 0x48, 0x4D, 0x40, 0x20,
 0x38, 0x08, 0x08, 0x08, 0x08,
 0x08, 0x08, 0x08, 0x08, 0x38,
 0x2F, 0x10, 0xC8, 0xAC, 0xBA,
 0x2F, 0x10, 0x28, 0x34, 0xFA,
 0x00, 0x00, 0x7B, 0x00, 0x00,
 0x08, 0x14, 0x2A, 0x14, 0x22,
 0x22, 0x14, 0x2A, 0x14, 0x08,
 0x55, 0x00, 0x55, 0x00, 0x55,
 0xAA, 0x55, 0xAA, 0x55, 0xAA,
 0xFF, 0x55, 0xFF, 0x55, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0x00,
 0x10, 0x10, 0x10, 0xFF, 0x00,
 0x14, 0x14, 0x14, 0xFF, 0x00,
 0x10, 0x10, 0xFF, 0x00, 0xFF,
 0x10, 0x10, 0xF0, 0x10, 0xF0,
 0x14, 0x14, 0x14, 0xFC, 0x00,
 0x14, 0x14, 0xF7, 0x00, 0xFF,
 0x00, 0x00, 0xFF, 0x00, 0xFF,
 0x14, 0x14, 0xF4, 0x04, 0xFC,
 0x14, 0x14, 0x17, 0x10, 0x1F,
 0x10, 0x10, 0x1F, 0x10, 0x1F,
 0x14, 0x14, 0x14, 0x1F, 0x00,
 0x10, 0x10, 0x10, 0xF0, 0x00,
 0x00, 0x00, 0x00, 0x1F, 0x10,
 0x10, 0x10, 0x10, 0x1F, 0x10,
 0x10, 0x10, 0x10, 0xF0, 0x10,
 0x00, 0x00, 0x00, 0xFF, 0x10,
 0x10, 0x10, 0x10, 0x10, 0x10,
 0x10, 0x10, 0x10, 0xFF, 0x10,
 0x00, 0x00, 0x00, 0xFF, 0x14,
 0x00, 0x00, 0xFF, 0x00, 0xFF,
 0x00, 0x00, 0x1F, 0x10, 0x17,
 0x00, 0x00, 0xFC, 0x04, 0xF4,
 0x14, 0x14, 0x17, 0x10, 0x17,
 0x14, 0x14, 0xF4, 0x04, 0xF4,
 0x00, 0x00, 0xFF, 0x00, 0xF7,
 0x14, 0x14, 0x14, 0x14, 0x14,
 0x14, 0x14, 0xF7, 0x00, 0xF7,
 0x14, 0x14, 0x14, 0x17, 0x14,
 0x10, 0x10, 0x1F, 0x10, 0x1F,
 0x14, 0x14, 0x14, 0xF4, 0x14,
 0x10, 0x10, 0xF0, 0x10, 0xF0,
 0x00, 0x00, 0x1F, 0x10, 0x1F,
 0x00, 0x00, 0x00, 0x1F, 0x14,
 0x00, 0x00, 0x00, 0xFC, 0x14,
 0x00, 0x00, 0xF0, 0x10, 0xF0,
 0x10, 0x10, 0xFF, 0x10, 0xFF,
 0x14, 0x14, 0x14, 0xFF, 0x14,
 0x10, 0x10, 0x10, 0x1F, 0x00,
 0x00, 0x00, 0x00, 0xF0, 0x10,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
 0xFF, 0xFF, 0xFF, 0x00, 0x00,
 0x00, 0x00, 0x00, 0xFF, 0xFF,
 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
 0x38, 0x44, 0x44, 0x38, 0x44,
 0xFC, 0x4A, 0x4A, 0x4A, 0x34,
 0x7E, 0x02, 0x02, 0x06, 0x06,
 0x02, 0x7E, 0x02, 0x7E, 0x02,
 0x63, 0x55, 0x49, 0x41, 0x63,
 0x38, 0x44, 0x44, 0x3C, 0x04,
 0x40, 0x7E, 0x20, 0x1E, 0x20,
 0x06, 0x02, 0x7E, 0x02, 0x02,
 0x99, 0xA5, 0xE7, 0xA5, 0x99,
 0x1C, 0x2A, 0x49, 0x2A, 0x1C,
 0x4C, 0x72, 0x01, 0x72, 0x4C,
 0x30, 0x4A, 0x4D, 0x4D, 0x30,
 0x30, 0x48, 0x78, 0x48, 0x30,
 0xBC, 0x62, 0x5A, 0x46, 0x3D,
 0x3E, 0x49, 0x49, 0x49, 0x00,
 0x7E, 0x01, 0x01, 0x01, 0x7E,
 0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
 0x44, 0x44, 0x5F, 0x44, 0x44,
 0x40, 0x51, 0x4A, 0x44, 0x40,
 0x40, 0x44, 0x4A, 0x51, 0x40,
 0x00, 0x00, 0xFF, 0x01, 0x03,
 0xE0, 0x80, 0xFF, 0x00, 0x00,
 0x08, 0x08, 0x6B, 0x6B, 0x08,
 0x36, 0x12, 0x36, 0x24, 0x36,
 0x06, 0x0F, 0x09, 0x0F, 0x06,
 0x00, 0x00, 0x18, 0x18, 0x00,
 0x00, 0x00, 0x10, 0x10, 0x00,
 0x30, 0x40, 0xFF, 0x01, 0x01,
 0x00, 0x1F, 0x01, 0x01, 0x1E,
 0x00, 0x19, 0x1D, 0x17, 0x12,
 0x00, 0x3C, 0x3C, 0x3C, 0x3C,
 0x00, 0x00, 0x00, 0x00, 0x00
};
#line 395 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void writeLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
  _Bool  steep = abs((int16_t)(y1 - y0)) > abs((int16_t)(x1 - x0));
 int16_t dx, dy, err, ystep;
 if (steep) {
  { int16_t t = x0; x0 = y0; y0 = t; } ;
  { int16_t t = x1; x1 = y1; y1 = t; } ;
 }

 if (x0 > x1) {
  { int16_t t = x0; x0 = x1; x1 = t; } ;
  { int16_t t = y0; y0 = y1; y1 = t; } ;
 }

 dx = x1 - x0;
 dy = abs((int16_t)(y1 - y0));

 err = dx / 2;
 ystep;

 if (y0 < y1) {
 ystep = 1;
 } else {
 ystep = -1;
 }

 for (; x0<=x1; x0++) {
 if (steep) {
  drawPixel (y0, x0, color);
 } else {
  drawPixel (x0, y0, color);
 }
 err -= dy;
 if (err < 0) {
 y0 += ystep;
 err += dx;
 }
 }
}
#line 444 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void display_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {

 if(x0 == x1){
 if(y0 > y1)  { int16_t t = y0; y0 = y1; y1 = t; } ;
  drawVLine (x0, y0, y1 - y0 + 1, color);
 } else if(y0 == y1){
 if(x0 > x1)  { int16_t t = x0; x0 = x1; x1 = t; } ;
  drawHLine (x0, y0, x1 - x0 + 1, color);
 } else {
 writeLine(x0, y0, x1, y1, color);
 }
}
#line 466 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void display_drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color) {
 int16_t f = 1 - r;
 int16_t ddF_x = 1;
 int16_t ddF_y = -2 * r;
 int16_t x = 0;
 int16_t y = r;

  drawPixel (x0 , y0+r, color);
  drawPixel (x0 , y0-r, color);
  drawPixel (x0+r, y0 , color);
  drawPixel (x0-r, y0 , color);

 while (x<y) {
 if (f >= 0) {
 y--;
 ddF_y += 2;
 f += ddF_y;
 }
 x++;
 ddF_x += 2;
 f += ddF_x;

  drawPixel (x0 + x, y0 + y, color);
  drawPixel (x0 - x, y0 + y, color);
  drawPixel (x0 + x, y0 - y, color);
  drawPixel (x0 - x, y0 - y, color);
  drawPixel (x0 + y, y0 + x, color);
  drawPixel (x0 - y, y0 + x, color);
  drawPixel (x0 + y, y0 - x, color);
  drawPixel (x0 - y, y0 - x, color);
 }
}
#line 509 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void display_drawCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t color) {
 int16_t f = 1 - r;
 int16_t ddF_x = 1;
 int16_t ddF_y = -2 * r;
 int16_t x = 0;
 int16_t y = r;

 while (x<y) {
 if (f >= 0) {
 y--;
 ddF_y += 2;
 f += ddF_y;
 }
 x++;
 ddF_x += 2;
 f += ddF_x;
 if (cornername & 0x4) {
  drawPixel (x0 + x, y0 + y, color);
  drawPixel (x0 + y, y0 + x, color);
 }
 if (cornername & 0x2) {
  drawPixel (x0 + x, y0 - y, color);
  drawPixel (x0 + y, y0 - x, color);
 }
 if (cornername & 0x8) {
  drawPixel (x0 - y, y0 + x, color);
  drawPixel (x0 - x, y0 + y, color);
 }
 if (cornername & 0x1) {
  drawPixel (x0 - y, y0 - x, color);
  drawPixel (x0 - x, y0 - y, color);
 }
 }
}
#line 553 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void display_fillCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color) {
  drawVLine (x0, y0-r, 2*r+1, color);
 display_fillCircleHelper(x0, y0, r, 3, 0, color);
}
#line 570 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void display_fillCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t corners, uint16_t delta, uint16_t color) {
 int16_t f = 1 - r;
 int16_t ddF_x = 1;
 int16_t ddF_y = -2 * r;
 int16_t x = 0;
 int16_t y = r;
 int16_t px = x;
 int16_t py = y;

 delta++;

 while(x < y) {
 if (f >= 0) {
 y--;
 ddF_y += 2;
 f += ddF_y;
 }
 x++;
 ddF_x += 2;
 f += ddF_x;


 if(x < (y + 1)) {
 if(corners & 1)  drawVLine (x0+x, y0-y, 2*y+delta, color);
 if(corners & 2)  drawVLine (x0-x, y0-y, 2*y+delta, color);
 }
 if(y != py) {
 if(corners & 1)  drawVLine (x0+py, y0-px, 2*px+delta, color);
 if(corners & 2)  drawVLine (x0-py, y0-px, 2*px+delta, color);
 py = y;
 }
 px = x;
 }
}
#line 615 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void display_drawRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
  drawHLine (x, y, w, color);
  drawHLine (x, y+h-1, w, color);
  drawVLine (x, y, h, color);
  drawVLine (x+w-1, y, h, color);
}
#line 633 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void display_drawRoundRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t r, uint16_t color) {
 int16_t max_radius = ((w < h) ? w : h) / 2;
 if(r > max_radius) r = max_radius;

  drawHLine (x+r , y , w-2*r, color);
  drawHLine (x+r , y+h-1, w-2*r, color);
  drawVLine (x , y+r , h-2*r, color);
  drawVLine (x+w-1, y+r , h-2*r, color);

 display_drawCircleHelper(x+r , y+r , r, 1, color);
 display_drawCircleHelper(x+w-r-1, y+r , r, 2, color);
 display_drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 display_drawCircleHelper(x+r , y+h-r-1, r, 8, color);
}
#line 659 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void display_fillRoundRect(uint16_t x, uint16_t y, uint16_t w,
 uint16_t h, uint16_t r, uint16_t color) {
 int16_t max_radius = ((w < h) ? w : h) / 2;
 if(r > max_radius) r = max_radius;

  fillRect (x+r, y, w-2*r, h, color);

 display_fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);

 display_fillCircleHelper(x+r , y+r, r, 2, h-2*r-1, color);
}
#line 683 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void display_drawTriangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
 uint16_t x2, uint16_t y2, uint16_t color) {
 display_drawLine(x0, y0, x1, y1, color);
 display_drawLine(x1, y1, x2, y2, color);
 display_drawLine(x2, y2, x0, y0, color);
}
#line 702 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void display_fillTriangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
 uint16_t x2, uint16_t y2, uint16_t color) {
 int16_t a, b, y, last, dx01, dy01, dx02, dy02, dx12, dy12;
 int32_t
 sa = 0,
 sb = 0;


 if (y0 > y1) {
  { int16_t t = y0; y0 = y1; y1 = t; } ;  { int16_t t = x0; x0 = x1; x1 = t; } ;
 }
 if (y1 > y2) {
  { int16_t t = y2; y2 = y1; y1 = t; } ;  { int16_t t = x2; x2 = x1; x1 = t; } ;
 }
 if (y0 > y1) {
  { int16_t t = y0; y0 = y1; y1 = t; } ;  { int16_t t = x0; x0 = x1; x1 = t; } ;
 }

 if(y0 == y2) {
 a = b = x0;
 if(x1 < a) a = x1;
 else if(x1 > b) b = x1;
 if(x2 < a) a = x2;
 else if(x2 > b) b = x2;
  drawHLine (a, y0, b-a+1, color);
 return;
 }

 dx01 = x1 - x0;
 dy01 = y1 - y0;
 dx02 = x2 - x0;
 dy02 = y2 - y0;
 dx12 = x2 - x1;
 dy12 = y2 - y1;







 if(y1 == y2) last = y1;
 else last = y1-1;

 for(y=y0; y<=last; y++) {
 a = x0 + sa / dy01;
 b = x0 + sb / dy02;
 sa += dx01;
 sb += dx02;
#line 755 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
 if(a > b)  { int16_t t = a; a = b; b = t; } ;
  drawHLine (a, y, b-a+1, color);
 }



 sa = dx12 * (y - y1);
 sb = dx02 * (y - y0);
 for(; y<=y2; y++) {
 a = x1 + sa / dy12;
 b = x0 + sb / dy02;
 sa += dx12;
 sb += dx02;
#line 772 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
 if(a > b)  { int16_t t = a; a = b; b = t; } ;
  drawHLine (a, y, b-a+1, color);
 }
}
#line 783 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void display_putc(uint8_t c) {
 uint8_t i, j;
 if (c == ' ' && cursor_x == 0 && wrap)
 return;
 if(c == '\r') {
 cursor_x = 0;
 return;
 }
 if(c == '\n') {
 cursor_y += textsize * 8;
 return;
 }

 for(i = 0; i < 5; i++ ) {
 uint8_t line = font[c][i];
 for(j = 0; j < 8; j++, line >>= 1) {
 if(line & 1) {
 if(textsize == 1)
  drawPixel (cursor_x + i, cursor_y + j, textcolor);
 else
  fillRect (cursor_x + i * textsize, cursor_y + j * textsize, textsize, textsize, textcolor);
 }
 else
 if(textbgcolor != textcolor) {
 if(textsize == 1)
  drawPixel (cursor_x + i, cursor_y + j, textbgcolor);
 else
  fillRect (cursor_x + i * textsize, cursor_y + j * textsize, textsize, textsize, textbgcolor);
 }
 }
 }

 if(textbgcolor != textcolor) {
 if(textsize == 1)  drawVLine (cursor_x + 5, cursor_y, 8, textbgcolor);
 else  fillRect (cursor_x + 5 * textsize, cursor_y, textsize, 8 * textsize, textbgcolor);
 }

 cursor_x += textsize * 6;

 if( cursor_x > ((uint16_t) _width  + textsize * 6) )
 cursor_x =  _width ;

 if (wrap && (cursor_x + (textsize * 5)) >  _width )
 {
 cursor_x = 0;
 cursor_y += textsize * 8;
 if( cursor_y > ((uint16_t) _height  + textsize * 8) )
 cursor_y =  _height ;
 }
}


void display_puts(uint8_t *s) {
 while(*s)
 display_putc(*s++);
}


void display_customChar(const uint8_t *c) {
 uint8_t i, j;
 for(i = 0; i < 5; i++ ) {
 uint8_t line = c[i];
 for(j = 0; j < 8; j++, line >>= 1) {
 if(line & 1) {
 if(textsize == 1)
  drawPixel (cursor_x + i, cursor_y + j, textcolor);
 else
  fillRect (cursor_x + i * textsize, cursor_y + j * textsize, textsize, textsize, textcolor);
 }
 else
 if(textbgcolor != textcolor) {
 if(textsize == 1)
  drawPixel (cursor_x + i, cursor_y + j, textbgcolor);
 else
  fillRect (cursor_x + i * textsize, cursor_y + j * textsize, textsize, textsize, textbgcolor);
 }
 }
 }

 if(textbgcolor != textcolor) {
 if(textsize == 1)  drawVLine (cursor_x + 5, cursor_y, 8, textbgcolor);
 else  fillRect (cursor_x + 5 * textsize, cursor_y, textsize, 8 * textsize, textbgcolor);
 }

 cursor_x += textsize * 6;

 if( cursor_x > ((uint16_t) _width  + textsize * 6) )
 cursor_x =  _width ;

 if (wrap && (cursor_x + (textsize * 5)) >  _width )
 {
 cursor_x = 0;
 cursor_y += textsize * 8;
 if( cursor_y > ((uint16_t) _height  + textsize * 8) )
 cursor_y =  _height ;
 }
}
#line 892 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void display_drawChar(uint16_t x, uint16_t y, uint8_t c, uint16_t color, uint16_t bg,
 uint8_t size) {
 uint16_t prev_x = cursor_x,
 prev_y = cursor_y,
 prev_color = textcolor,
 prev_bg = textbgcolor;
 uint8_t prev_size = textsize;

 display_setCursor(x, y);
 display_setTextSize(size);
 display_setTextColor(color, bg);
 display_putc(c);

 cursor_x = prev_x;
 cursor_y = prev_y;
 textcolor = prev_color;
 textbgcolor = prev_bg;
 textsize = prev_size;
}
#line 919 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void display_setCursor(uint16_t x, uint16_t y) {
 cursor_x = x;
 cursor_y = y;
}
#line 930 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
uint16_t display_getCursorX(void) {
 return cursor_x;
}
#line 940 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
uint16_t display_getCursorY(void) {
 return cursor_y;
}
#line 950 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void display_setTextSize(uint8_t s) {
 textsize = (s > 0) ? s : 1;
}
#line 961 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void display_setTextColor(uint16_t c, uint16_t b) {
 textcolor = c;
 textbgcolor = b;
}
#line 972 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void display_setTextWrap( _Bool  w) {
 wrap = w;
}
#line 982 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
uint8_t display_getRotation(void) {
 return rotation;
}
#line 992 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
uint16_t display_getWidth(void) {
 return  _width ;
}
#line 1002 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
uint16_t display_getHeight(void) {
 return  _height ;
}
#line 1018 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
uint16_t display_color565(uint8_t red, uint8_t green, uint8_t blue) {
 return ((uint16_t)(red & 0xF8) << 8) | ((uint16_t)(green & 0xFC) << 3) | (blue >> 3);
}
#line 1034 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void display_drawBitmapV1(uint16_t x, uint16_t y, const uint8_t *bitmap, uint16_t w, uint16_t h,
 uint16_t color) {
 uint16_t i, j;
 for( i = 0; i < h/8; i++)
 {
 for( j = 0; j < w * 8; j++)
 {
 if( bitmap[j/8 + i*w] & (1 << (j % 8)) )
  drawPixel (x + j/8, y + i*8 + (j % 8), color);
 }
 }
}
#line 1060 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void display_drawBitmapV1_bg(uint16_t x, uint16_t y, const uint8_t *bitmap, uint16_t w, uint16_t h,
 uint16_t color, uint16_t bg) {
 uint16_t i, j;
 for( i = 0; i < h/8; i++)
 {
 for( j = 0; j < w * 8; j++)
 {
 if( bitmap[j/8 + i*w] & (1 << (j % 8)) )
  drawPixel (x + j/8, y + i*8 + (j % 8), color);
 else
  drawPixel (x + j/8, y + i*8 + (j % 8), bg);
 }
 }
}
#line 1087 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void display_drawBitmapV2(uint16_t x, uint16_t y, const uint8_t *bitmap, uint16_t w, uint16_t h,
 uint16_t color) {

 uint16_t byteWidth = (w + 7) / 8;
 uint8_t _byte = 0;
 uint16_t i, j;

 for(j = 0; j < h; j++, y++) {
 for( i = 0; i < w; i++ ) {
 if(i & 7) _byte <<= 1;
 else _byte = bitmap[j * byteWidth + i / 8];
 if(_byte & 0x80)
  drawPixel (x+i, y, color);
 }
 }
}
#line 1117 "c:/users/arge/desktop/microc_folder2/st7735/gfx_library.h"
void display_drawBitmapV2_bg(uint16_t x, uint16_t y, const uint8_t *bitmap, uint16_t w, uint16_t h,
 uint16_t color, uint16_t bg) {

 uint16_t byteWidth = (w + 7) / 8;
 uint8_t _byte = 0;
 uint16_t i, j;
 for(j = 0; j < h; j++, y++) {
 for(i = 0; i < w; i++ ) {
 if(i & 7) _byte <<= 1;
 else _byte = bitmap[j * byteWidth + i / 8];
 if(_byte & 0x80)
  drawPixel (x+i, y, color);
 else
  drawPixel (x+i, y, bg);
 }
 }
}

uint8_t printNumber(uint32_t n, int8_t n_width, uint8_t _flags) {
 uint8_t i=0, j, buff[10];
 do {
 buff[i] = (uint8_t)( n % (_flags & 0x1F) );
 if (buff[i] > 9)
 buff[i] += (_flags & 0x80) ? 0x07 : 0x27;
 buff[i++] += '0';
 n /= (_flags & 0x1F);
 } while (n);
 j = i;
 if(_flags & 0x40) {
 n_width--;
 j++;
 if(_flags & 0x20) {
 display_putc('-');
 _flags &= ~0x40;
 }
 }
 while (i < n_width--) {
 if (_flags & 0x20) display_putc('0');
 else display_putc(' ');
 }
 if (_flags & 0x40)
 display_putc('-');
 do {
 display_putc(buff[--i]);
 } while(i);
 return j;
}

void printFloat(float float_n, int8_t f_width, int8_t decimal, uint8_t _flags) {
 int32_t int_part = float_n;
 float rem_part;
 if(decimal == 0) decimal = 1;
 if(float_n < 0) {
 _flags |= 0x40;
 rem_part = (float)int_part - float_n;
 int_part = ~int_part + 1;
 }
 else
 rem_part = float_n - (float)int_part;
 _flags |= 10;
 f_width -= printNumber(int_part, f_width - decimal - 1, _flags);
 display_putc('.');
 f_width--;
 if(f_width < 1) f_width = 1;
 if(decimal > f_width) decimal = f_width;
 while( decimal > 0 && (rem_part != 0 || decimal > 0) ) {
 decimal--;
 rem_part *= 10;
 display_putc( (uint8_t)rem_part + '0' );
 rem_part -= (uint8_t)rem_part;
 }
}

void v_printf(const char *fmt, va_list arp) {
 uint8_t _flags, c, d=0, w=0;
 uint32_t nbr;
 while (1) {
 c = *fmt++;

 if (!c)
 break;

 if (c != '%') {
 display_putc(c);
 continue;
 }

 _flags = 0;
 c = *fmt++;

 if (c == '0') {
 _flags |= 0x20;
 c = *fmt++;
 }

 for (w = 0; c >= '0' && c <= '9'; c = *fmt++)
 w = w * 10 + c - '0';

 if (c == '.') {
 c = *fmt++;
 for (d = 0; c >= '0' && c <= '9'; c = *fmt++)
 d = d * 10 + c - '0';
 }

 if(c == 'f' || c == 'F') {
 printFloat( (*(*(float **)arp)++) , w, d, _flags);
 continue;
 }

 if (c == 'l' || c == 'L') {
 _flags |= 0x40;
 c = *fmt++;
 }

 if (!c)
 break;

 if(c == 'X') {
 _flags |= 0x80;
 }

 if (c >= 'a')
 c -= 0x20;
 switch (c) {
 case 'C' :
 display_putc( (uint8_t) (*(*(uint8_t **)arp)++)  ); continue;
 case 'B' :
 _flags |= 2; break;
 case 'O' :
 _flags |= 8; break;
 case 'D' :
 case 'U' :
 _flags |= 10; break;
 case 'X' :
 _flags |= 16; break;
 default:
 display_putc(c); continue;
 }

 if(_flags & 0x40)
 nbr = (c == 'D') ?  (*(*(int32_t **)arp)++)  :  (*(*(uint32_t **)arp)++) ;
 else
 nbr = (c == 'D') ? (int32_t) (*(*(int16_t **)arp)++)  : (uint32_t) (*(*(uint16_t **)arp)++) ;
 if ( (c == 'D') && (nbr & 0x80000000) ) {
 _flags |= 0x40;
 nbr = ~nbr + 1;
 }
 else
 _flags &= ~0x40;
 printNumber(nbr, w, _flags);
 }
}

void display_printf(const char *fmt, ...) {
 va_list arg;
  *arg = (char *)&fmt + sizeof fmt ;
 v_printf(fmt, arg);
}
#line 1 "c:/users/arge/desktop/microc_folder2/st7735/bitmap.h"
const char dene[] = {

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xfe,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x1f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
0xff, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00,
0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x7f, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xfe, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00,
0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00,
0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00,
0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01,
0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00,
0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x0f, 0xff,
0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff,
0xff, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00,
0x00, 0xe0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0xe0, 0x00,
0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0xe0, 0x00, 0x70, 0x07, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x60, 0x07, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x3f, 0xe0, 0x1f, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0x80, 0x70, 0x00, 0xf0, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
0x00, 0x70, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x70, 0x00,
0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x03, 0xff,
0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff,
0xff, 0xc0, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x38,
0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x07, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xc0, 0x00,
0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x60,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0xe0, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x40, 0xfc, 0x03, 0xf0, 0x3f,
0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x43, 0xfe, 0x0f, 0xf8, 0x7f, 0xc0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xe0, 0x47, 0x87, 0x1e, 0x1c, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xf0, 0x4e, 0x01, 0x98, 0x0e, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x46,
0x01, 0x98, 0x06, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x4c, 0x00, 0xb0, 0x02,
0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xce, 0x4c, 0x01, 0xf0, 0x03, 0x20, 0xe0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xcc, 0x01, 0xf0, 0x06, 0x61, 0xc0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xc7, 0xc6, 0x01, 0xb8, 0x06, 0x61, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3,
0xc7, 0x03, 0x9c, 0x1e, 0x61, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0xc3, 0x87, 0x0e,
0x1c, 0x60, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc1, 0xfe, 0x07, 0xf8, 0x60, 0x60,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x40, 0xf8, 0x09, 0xe0, 0x20, 0x20, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00
};
#line 17 "C:/Users/ARGE/Desktop/MicroC_Folder2/ST7735/fdene.c"
void main()
{
 OSCCON = 0x72;
 ANSELC = 0;
 ANSELD = 0;
 SPI1_Init();


 tft_initR( 0x02 );
 display_setTextWrap(1);
  fillScreen ( 0x0000 );
#line 39 "C:/Users/ARGE/Desktop/MicroC_Folder2/ST7735/fdene.c"
 display_drawBitmapV2(14,30,dene,100,100,  0x001F );

 while(1) {
#line 55 "C:/Users/ARGE/Desktop/MicroC_Folder2/ST7735/fdene.c"
 }

}
