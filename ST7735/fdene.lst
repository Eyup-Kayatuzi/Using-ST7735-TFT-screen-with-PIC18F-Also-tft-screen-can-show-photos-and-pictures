;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 9.05.2022 18:07:44
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF003EF85  	GOTO        1802
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_SPI1_Write:
;__Lib_SPI_c345d014.c,84 :: 		
;__Lib_SPI_c345d014.c,87 :: 		
0x001C	0xFFC9C06E  	MOVFF       FARG_SPI1_Write_data_, SSP1BUF
;__Lib_SPI_c345d014.c,88 :: 		
L_SPI1_Write8:
0x0020	0xB0C7      	BTFSC       SSP1STAT, 0 
0x0022	0xD002      	BRA         L_SPI1_Write9
;__Lib_SPI_c345d014.c,89 :: 		
0x0024	0x0000      	NOP
0x0026	0xD7FC      	BRA         L_SPI1_Write8
L_SPI1_Write9:
;__Lib_SPI_c345d014.c,90 :: 		
0x0028	0xF000CFC9  	MOVFF       SSP1BUF, R0
;__Lib_SPI_c345d014.c,92 :: 		
L_end_SPI1_Write:
0x002C	0x0012      	RETURN      0
; end of _SPI1_Write
_writeCommand:
;st7735.h,359 :: 		void writeCommand(uint8_t cmd) {
;st7735.h,360 :: 		TFT_DC = 0;
0x002E	0x9483      	BCF         RD2_bit, BitPos(RD2_bit+0) 
;st7735.h,361 :: 		ST7735_SPI_Write(cmd);
0x0030	0xF06EC06D  	MOVFF       FARG_writeCommand_cmd, FARG_SPI1_Write_data_
0x0034	0xDFF3      	RCALL       _SPI1_Write
;st7735.h,362 :: 		TFT_DC = 1;
0x0036	0x8483      	BSF         RD2_bit, BitPos(RD2_bit+0) 
;st7735.h,363 :: 		}
L_end_writeCommand:
0x0038	0x0012      	RETURN      0
; end of _writeCommand
_setAddrWindow:
;st7735.h,517 :: 		void setAddrWindow(uint8_t x, uint8_t y, uint8_t w, uint8_t h) {
;st7735.h,518 :: 		x += _xstart;
0x003A	0x5019      	MOVF        __xstart, 0 
0x003C	0x0100      	MOVLB       0
0x003E	0x2769      	ADDWF       FARG_setAddrWindow_x, 1, 1
;st7735.h,519 :: 		y += _ystart;
0x0040	0x5018      	MOVF        __ystart, 0 
0x0042	0x276A      	ADDWF       FARG_setAddrWindow_y, 1, 1
;st7735.h,521 :: 		writeCommand(ST77XX_CASET); // Column addr set
0x0044	0x0E2A      	MOVLW       42
0x0046	0x6F6D      	MOVWF       FARG_writeCommand_cmd, 1
0x0048	0xDFF2      	RCALL       _writeCommand
;st7735.h,522 :: 		ST7735_SPI_Write(0);
0x004A	0x0100      	MOVLB       0
0x004C	0x6B6E      	CLRF        FARG_SPI1_Write_data_, 1
0x004E	0xDFE6      	RCALL       _SPI1_Write
;st7735.h,523 :: 		ST7735_SPI_Write(x);
0x0050	0xF06EC069  	MOVFF       FARG_setAddrWindow_x, FARG_SPI1_Write_data_
0x0054	0xDFE3      	RCALL       _SPI1_Write
;st7735.h,524 :: 		ST7735_SPI_Write(0);
0x0056	0x0100      	MOVLB       0
0x0058	0x6B6E      	CLRF        FARG_SPI1_Write_data_, 1
0x005A	0xDFE0      	RCALL       _SPI1_Write
;st7735.h,525 :: 		ST7735_SPI_Write(x+w-1);
0x005C	0x0100      	MOVLB       0
0x005E	0x516B      	MOVF        FARG_setAddrWindow_w, 0, 1
0x0060	0x2569      	ADDWF       FARG_setAddrWindow_x, 0, 1
0x0062	0x6F6E      	MOVWF       FARG_SPI1_Write_data_, 1
0x0064	0x076E      	DECF        FARG_SPI1_Write_data_, 1, 1
0x0066	0xDFDA      	RCALL       _SPI1_Write
;st7735.h,527 :: 		writeCommand(ST77XX_RASET); // Row addr set
0x0068	0x0E2B      	MOVLW       43
0x006A	0x0100      	MOVLB       0
0x006C	0x6F6D      	MOVWF       FARG_writeCommand_cmd, 1
0x006E	0xDFDF      	RCALL       _writeCommand
;st7735.h,528 :: 		ST7735_SPI_Write(0);
0x0070	0x0100      	MOVLB       0
0x0072	0x6B6E      	CLRF        FARG_SPI1_Write_data_, 1
0x0074	0xDFD3      	RCALL       _SPI1_Write
;st7735.h,529 :: 		ST7735_SPI_Write(y);
0x0076	0xF06EC06A  	MOVFF       FARG_setAddrWindow_y, FARG_SPI1_Write_data_
0x007A	0xDFD0      	RCALL       _SPI1_Write
;st7735.h,530 :: 		ST7735_SPI_Write(0);
0x007C	0x0100      	MOVLB       0
0x007E	0x6B6E      	CLRF        FARG_SPI1_Write_data_, 1
0x0080	0xDFCD      	RCALL       _SPI1_Write
;st7735.h,531 :: 		ST7735_SPI_Write(y+h-1);
0x0082	0x0100      	MOVLB       0
0x0084	0x516C      	MOVF        FARG_setAddrWindow_h, 0, 1
0x0086	0x256A      	ADDWF       FARG_setAddrWindow_y, 0, 1
0x0088	0x6F6E      	MOVWF       FARG_SPI1_Write_data_, 1
0x008A	0x076E      	DECF        FARG_SPI1_Write_data_, 1, 1
0x008C	0xDFC7      	RCALL       _SPI1_Write
;st7735.h,533 :: 		writeCommand(ST77XX_RAMWR); // write to RAM
0x008E	0x0E2C      	MOVLW       44
0x0090	0x0100      	MOVLB       0
0x0092	0x6F6D      	MOVWF       FARG_writeCommand_cmd, 1
0x0094	0xDFCC      	RCALL       _writeCommand
;st7735.h,534 :: 		}
L_end_setAddrWindow:
0x0096	0x0012      	RETURN      0
; end of _setAddrWindow
_startWrite:
;st7735.h,334 :: 		void startWrite(void) {
;st7735.h,335 :: 		TFT_CS = 0;
0x0098	0x9283      	BCF         RD1_bit, BitPos(RD1_bit+0) 
;st7735.h,336 :: 		}
L_end_startWrite:
0x009A	0x0012      	RETURN      0
; end of _startWrite
_endWrite:
;st7735.h,345 :: 		void endWrite(void) {
;st7735.h,346 :: 		TFT_CS = 1;
0x009C	0x8283      	BSF         RD1_bit, BitPos(RD1_bit+0) 
;st7735.h,347 :: 		}
L_end_endWrite:
0x009E	0x0012      	RETURN      0
; end of _endWrite
_Mul_16X16_U:
;__Lib_Math.c,440 :: 		
;__Lib_Math.c,447 :: 		
0x00A0	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,448 :: 		
0x00A2	0x6A0A      	CLRF        R10, 0
;__Lib_Math.c,449 :: 		
0x00A4	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,450 :: 		
0x00A6	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,451 :: 		
0x00A8	0x0204      	MULWF       R4, 0
;__Lib_Math.c,453 :: 		
0x00AA	0xF009CFF4  	MOVFF       PRODH, R9
;__Lib_Math.c,454 :: 		
0x00AE	0xF008CFF3  	MOVFF       PRODL, R8
;__Lib_Math.c,455 :: 		
0x00B2	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,456 :: 		
0x00B4	0x0205      	MULWF       R5, 0
;__Lib_Math.c,458 :: 		
0x00B6	0xF00BCFF4  	MOVFF       PRODH, R11
;__Lib_Math.c,459 :: 		
0x00BA	0xF00ACFF3  	MOVFF       PRODL, R10
;__Lib_Math.c,460 :: 		
0x00BE	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,461 :: 		
0x00C0	0x0205      	MULWF       R5, 0
;__Lib_Math.c,463 :: 		
0x00C2	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,464 :: 		
0x00C4	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,465 :: 		
0x00C6	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,466 :: 		
0x00C8	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,467 :: 		
0x00CA	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,468 :: 		
0x00CC	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,469 :: 		
0x00CE	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,470 :: 		
0x00D0	0x0204      	MULWF       R4, 0
;__Lib_Math.c,472 :: 		
0x00D2	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,473 :: 		
0x00D4	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,474 :: 		
0x00D6	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,475 :: 		
0x00D8	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,476 :: 		
0x00DA	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,477 :: 		
0x00DC	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,479 :: 		
0x00DE	0xF000C008  	MOVFF       R8, R0
;__Lib_Math.c,480 :: 		
0x00E2	0xF001C009  	MOVFF       R9, R1
;__Lib_Math.c,481 :: 		
0x00E6	0xF002C00A  	MOVFF       R10, R2
;__Lib_Math.c,482 :: 		
0x00EA	0xF003C00B  	MOVFF       R11, R3
;__Lib_Math.c,485 :: 		
L_end_Mul_16X16_U:
0x00EE	0x0012      	RETURN      0
; end of _Mul_16X16_U
_fillRect:
;st7735.h,701 :: 		void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color) {
;st7735.h,703 :: 		if(w && h) {                            // Nonzero width and height?
0x00F0	0x0100      	MOVLB       0
0x00F2	0x5363      	MOVF        FARG_fillRect_w, 1, 1
0x00F4	0xB4D8      	BTFSC       STATUS, 2 
0x00F6	0xD06D      	BRA         L_fillRect88
0x00F8	0x5364      	MOVF        FARG_fillRect_h, 1, 1
0x00FA	0xB4D8      	BTFSC       STATUS, 2 
0x00FC	0xD06A      	BRA         L_fillRect88
L__fillRect328:
;st7735.h,704 :: 		uint8_t hi = color >> 8, lo = color;
0x00FE	0xF000C066  	MOVFF       FARG_fillRect_color+1, R0
0x0102	0x6A01      	CLRF        R1 
0x0104	0xF05EC000  	MOVFF       R0, fillRect_hi_L1
0x0108	0xF05FC065  	MOVFF       FARG_fillRect_color, fillRect_lo_L1
;st7735.h,705 :: 		if((x >= _width) || (y >= _height))
0x010C	0x503D      	MOVF        __width, 0 
0x010E	0x5D61      	SUBWF       FARG_fillRect_x, 0, 1
0x0110	0xE204      	BC          L__fillRect327
0x0112	0x503C      	MOVF        __height, 0 
0x0114	0x5D62      	SUBWF       FARG_fillRect_y, 0, 1
0x0116	0xE201      	BC          L__fillRect327
0x0118	0xD001      	BRA         L_fillRect91
L__fillRect327:
;st7735.h,706 :: 		return;
0x011A	0xD05B      	BRA         L_end_fillRect
L_fillRect91:
;st7735.h,707 :: 		if((x + w - 1) >= _width)
0x011C	0x5163      	MOVF        FARG_fillRect_w, 0, 1
0x011E	0x2561      	ADDWF       FARG_fillRect_x, 0, 1
0x0120	0x6E00      	MOVWF       R0 
0x0122	0x6A01      	CLRF        R1 
0x0124	0x0E00      	MOVLW       0
0x0126	0x2201      	ADDWFC      R1, 1 
0x0128	0x0E01      	MOVLW       1
0x012A	0x5C00      	SUBWF       R0, 0 
0x012C	0x6E02      	MOVWF       R2 
0x012E	0x0E00      	MOVLW       0
0x0130	0x5801      	SUBWFB      R1, 0 
0x0132	0x6E03      	MOVWF       R3 
0x0134	0x0E80      	MOVLW       128
0x0136	0x1803      	XORWF       R3, 0 
0x0138	0x6E00      	MOVWF       R0 
0x013A	0x0E80      	MOVLW       128
0x013C	0x5C00      	SUBWF       R0, 0 
0x013E	0xE102      	BNZ         L__fillRect354
0x0140	0x503D      	MOVF        __width, 0 
0x0142	0x5C02      	SUBWF       R2, 0 
L__fillRect354:
0x0144	0xE303      	BNC         L_fillRect92
;st7735.h,708 :: 		w = _width  - x;
0x0146	0x5161      	MOVF        FARG_fillRect_x, 0, 1
0x0148	0x5C3D      	SUBWF       __width, 0 
0x014A	0x6F63      	MOVWF       FARG_fillRect_w, 1
L_fillRect92:
;st7735.h,709 :: 		if((y + h - 1) >= _height)
0x014C	0x5164      	MOVF        FARG_fillRect_h, 0, 1
0x014E	0x2562      	ADDWF       FARG_fillRect_y, 0, 1
0x0150	0x6E00      	MOVWF       R0 
0x0152	0x6A01      	CLRF        R1 
0x0154	0x0E00      	MOVLW       0
0x0156	0x2201      	ADDWFC      R1, 1 
0x0158	0x0E01      	MOVLW       1
0x015A	0x5C00      	SUBWF       R0, 0 
0x015C	0x6E02      	MOVWF       R2 
0x015E	0x0E00      	MOVLW       0
0x0160	0x5801      	SUBWFB      R1, 0 
0x0162	0x6E03      	MOVWF       R3 
0x0164	0x0E80      	MOVLW       128
0x0166	0x1803      	XORWF       R3, 0 
0x0168	0x6E00      	MOVWF       R0 
0x016A	0x0E80      	MOVLW       128
0x016C	0x5C00      	SUBWF       R0, 0 
0x016E	0xE102      	BNZ         L__fillRect355
0x0170	0x503C      	MOVF        __height, 0 
0x0172	0x5C02      	SUBWF       R2, 0 
L__fillRect355:
0x0174	0xE303      	BNC         L_fillRect93
;st7735.h,710 :: 		h = _height - y;
0x0176	0x5162      	MOVF        FARG_fillRect_y, 0, 1
0x0178	0x5C3C      	SUBWF       __height, 0 
0x017A	0x6F64      	MOVWF       FARG_fillRect_h, 1
L_fillRect93:
;st7735.h,711 :: 		startWrite();
0x017C	0xDF8D      	RCALL       _startWrite
;st7735.h,712 :: 		setAddrWindow(x, y, w, h);
0x017E	0xF069C061  	MOVFF       FARG_fillRect_x, FARG_setAddrWindow_x
0x0182	0xF06AC062  	MOVFF       FARG_fillRect_y, FARG_setAddrWindow_y
0x0186	0xF06BC063  	MOVFF       FARG_fillRect_w, FARG_setAddrWindow_w
0x018A	0xF06CC064  	MOVFF       FARG_fillRect_h, FARG_setAddrWindow_h
0x018E	0xDF55      	RCALL       _setAddrWindow
;st7735.h,713 :: 		px = (uint16_t)w * h;
0x0190	0xF000C063  	MOVFF       FARG_fillRect_w, R0
0x0194	0x0E00      	MOVLW       0
0x0196	0x6E01      	MOVWF       R1 
0x0198	0xF004C064  	MOVFF       FARG_fillRect_h, R4
0x019C	0x0E00      	MOVLW       0
0x019E	0x6E05      	MOVWF       R5 
0x01A0	0xDF7F      	RCALL       _Mul_16X16_U
0x01A2	0xF067C000  	MOVFF       R0, fillRect_px_L0
0x01A6	0xF068C001  	MOVFF       R1, fillRect_px_L0+1
;st7735.h,714 :: 		while (px--) {
L_fillRect94:
0x01AA	0xF000C067  	MOVFF       fillRect_px_L0, R0
0x01AE	0xF001C068  	MOVFF       fillRect_px_L0+1, R1
0x01B2	0x0E01      	MOVLW       1
0x01B4	0x0100      	MOVLB       0
0x01B6	0x5F67      	SUBWF       fillRect_px_L0, 1, 1
0x01B8	0x0E00      	MOVLW       0
0x01BA	0x5B68      	SUBWFB      fillRect_px_L0+1, 1, 1
0x01BC	0x5000      	MOVF        R0, 0 
0x01BE	0x1001      	IORWF       R1, 0 
0x01C0	0xE007      	BZ          L_fillRect95
;st7735.h,715 :: 		ST7735_SPI_Write(hi);
0x01C2	0xF06EC05E  	MOVFF       fillRect_hi_L1, FARG_SPI1_Write_data_
0x01C6	0xDF2A      	RCALL       _SPI1_Write
;st7735.h,716 :: 		ST7735_SPI_Write(lo);
0x01C8	0xF06EC05F  	MOVFF       fillRect_lo_L1, FARG_SPI1_Write_data_
0x01CC	0xDF27      	RCALL       _SPI1_Write
;st7735.h,717 :: 		}
0x01CE	0xD7ED      	BRA         L_fillRect94
L_fillRect95:
;st7735.h,718 :: 		endWrite();
0x01D0	0xDF65      	RCALL       _endWrite
;st7735.h,719 :: 		}
L_fillRect88:
;st7735.h,720 :: 		}
L_end_fillRect:
0x01D2	0x0012      	RETURN      0
; end of _fillRect
_drawPixel:
;st7735.h,498 :: 		void drawPixel(uint8_t x, uint8_t y, uint16_t color) {
;st7735.h,499 :: 		if((x < _width) && (y < _height)) {
0x01D4	0x503D      	MOVF        __width, 0 
0x01D6	0x0100      	MOVLB       0
0x01D8	0x5D61      	SUBWF       FARG_drawPixel_x, 0, 1
0x01DA	0xE219      	BC          L_drawPixel30
0x01DC	0x503C      	MOVF        __height, 0 
0x01DE	0x5D62      	SUBWF       FARG_drawPixel_y, 0, 1
0x01E0	0xE216      	BC          L_drawPixel30
L__drawPixel319:
;st7735.h,500 :: 		startWrite();
0x01E2	0xDF5A      	RCALL       _startWrite
;st7735.h,501 :: 		setAddrWindow(x, y, 1, 1);
0x01E4	0xF069C061  	MOVFF       FARG_drawPixel_x, FARG_setAddrWindow_x
0x01E8	0xF06AC062  	MOVFF       FARG_drawPixel_y, FARG_setAddrWindow_y
0x01EC	0x0E01      	MOVLW       1
0x01EE	0x6F6B      	MOVWF       FARG_setAddrWindow_w, 1
0x01F0	0x0E01      	MOVLW       1
0x01F2	0x6F6C      	MOVWF       FARG_setAddrWindow_h, 1
0x01F4	0xDF22      	RCALL       _setAddrWindow
;st7735.h,502 :: 		ST7735_SPI_Write(color >> 8);
0x01F6	0xF000C064  	MOVFF       FARG_drawPixel_color+1, R0
0x01FA	0x6A01      	CLRF        R1 
0x01FC	0xF06EC000  	MOVFF       R0, FARG_SPI1_Write_data_
0x0200	0xDF0D      	RCALL       _SPI1_Write
;st7735.h,503 :: 		ST7735_SPI_Write(color & 0xFF);
0x0202	0x0EFF      	MOVLW       255
0x0204	0x0100      	MOVLB       0
0x0206	0x1563      	ANDWF       FARG_drawPixel_color, 0, 1
0x0208	0x6F6E      	MOVWF       FARG_SPI1_Write_data_, 1
0x020A	0xDF08      	RCALL       _SPI1_Write
;st7735.h,504 :: 		endWrite();
0x020C	0xDF47      	RCALL       _endWrite
;st7735.h,505 :: 		}
L_drawPixel30:
;st7735.h,506 :: 		}
L_end_drawPixel:
0x020E	0x0012      	RETURN      0
; end of _drawPixel
_displayInit:
;st7735.h,372 :: 		void displayInit(const uint8_t *addr){
;st7735.h,375 :: 		startWrite();
0x0210	0xDF43      	RCALL       _startWrite
;st7735.h,377 :: 		numCommands = *addr++;   // Number of commands to follow
0x0212	0xFFF6C061  	MOVFF       FARG_displayInit_addr, TBLPTRL
0x0216	0xFFF7C062  	MOVFF       FARG_displayInit_addr+1, TBLPTRH
0x021A	0xFFF8C063  	MOVFF       FARG_displayInit_addr+2, TBLPTRU
0x021E	0x0009      	TBLRD*+
0x0220	0xF05ECFF5  	MOVFF       TABLAT, displayInit_numCommands_L0
0x0224	0x0E01      	MOVLW       1
0x0226	0x0100      	MOVLB       0
0x0228	0x2761      	ADDWF       FARG_displayInit_addr, 1, 1
0x022A	0x0E00      	MOVLW       0
0x022C	0x2362      	ADDWFC      FARG_displayInit_addr+1, 1, 1
0x022E	0x2363      	ADDWFC      FARG_displayInit_addr+2, 1, 1
;st7735.h,379 :: 		while(numCommands--) {                 // For each command...
L_displayInit0:
0x0230	0xF000C05E  	MOVFF       displayInit_numCommands_L0, R0
0x0234	0x065E      	DECF        displayInit_numCommands_L0, 1 
0x0236	0x5200      	MOVF        R0, 1 
0x0238	0xB4D8      	BTFSC       STATUS, 2 
0x023A	0xD074      	BRA         L_displayInit1
;st7735.h,381 :: 		writeCommand(*addr++); // Read, issue command
0x023C	0xFFF6C061  	MOVFF       FARG_displayInit_addr, TBLPTRL
0x0240	0xFFF7C062  	MOVFF       FARG_displayInit_addr+1, TBLPTRH
0x0244	0xFFF8C063  	MOVFF       FARG_displayInit_addr+2, TBLPTRU
0x0248	0x0009      	TBLRD*+
0x024A	0xF06DCFF5  	MOVFF       TABLAT, FARG_writeCommand_cmd
0x024E	0xDEEF      	RCALL       _writeCommand
0x0250	0x0E01      	MOVLW       1
0x0252	0x0100      	MOVLB       0
0x0254	0x2761      	ADDWF       FARG_displayInit_addr, 1, 1
0x0256	0x0E00      	MOVLW       0
0x0258	0x2362      	ADDWFC      FARG_displayInit_addr+1, 1, 1
0x025A	0x2363      	ADDWFC      FARG_displayInit_addr+2, 1, 1
;st7735.h,382 :: 		numArgs  = *addr++;    // Number of args to follow
0x025C	0xFFF6C061  	MOVFF       FARG_displayInit_addr, TBLPTRL
0x0260	0xFFF7C062  	MOVFF       FARG_displayInit_addr+1, TBLPTRH
0x0264	0xFFF8C063  	MOVFF       FARG_displayInit_addr+2, TBLPTRU
0x0268	0x0009      	TBLRD*+
0x026A	0xF000CFF5  	MOVFF       TABLAT, R0
0x026E	0xF05FC000  	MOVFF       R0, displayInit_numArgs_L0
0x0272	0x0E01      	MOVLW       1
0x0274	0x2761      	ADDWF       FARG_displayInit_addr, 1, 1
0x0276	0x0E00      	MOVLW       0
0x0278	0x2362      	ADDWFC      FARG_displayInit_addr+1, 1, 1
0x027A	0x2363      	ADDWFC      FARG_displayInit_addr+2, 1, 1
;st7735.h,383 :: 		ms       = numArgs & ST_CMD_DELAY;   // If hibit set, delay follows args
0x027C	0x0E80      	MOVLW       128
0x027E	0x1400      	ANDWF       R0, 0 
0x0280	0x6F64      	MOVWF       displayInit_ms_L0, 1
0x0282	0x6B65      	CLRF        displayInit_ms_L0+1, 1
0x0284	0x0E00      	MOVLW       0
0x0286	0x1765      	ANDWF       displayInit_ms_L0+1, 1, 1
0x0288	0x0E00      	MOVLW       0
0x028A	0x6F65      	MOVWF       displayInit_ms_L0+1, 1
;st7735.h,384 :: 		numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
0x028C	0x0E7F      	MOVLW       127
0x028E	0x1400      	ANDWF       R0, 0 
0x0290	0x6E5F      	MOVWF       displayInit_numArgs_L0 
;st7735.h,385 :: 		while(numArgs--) {                   // For each argument...
L_displayInit2:
0x0292	0xF000C05F  	MOVFF       displayInit_numArgs_L0, R0
0x0296	0x065F      	DECF        displayInit_numArgs_L0, 1 
0x0298	0x5200      	MOVF        R0, 1 
0x029A	0xE011      	BZ          L_displayInit3
;st7735.h,386 :: 		ST7735_SPI_Write(*addr++);   // Read, issue argument
0x029C	0xFFF6C061  	MOVFF       FARG_displayInit_addr, TBLPTRL
0x02A0	0xFFF7C062  	MOVFF       FARG_displayInit_addr+1, TBLPTRH
0x02A4	0xFFF8C063  	MOVFF       FARG_displayInit_addr+2, TBLPTRU
0x02A8	0x0009      	TBLRD*+
0x02AA	0xF06ECFF5  	MOVFF       TABLAT, FARG_SPI1_Write_data_
0x02AE	0xDEB6      	RCALL       _SPI1_Write
0x02B0	0x0E01      	MOVLW       1
0x02B2	0x0100      	MOVLB       0
0x02B4	0x2761      	ADDWF       FARG_displayInit_addr, 1, 1
0x02B6	0x0E00      	MOVLW       0
0x02B8	0x2362      	ADDWFC      FARG_displayInit_addr+1, 1, 1
0x02BA	0x2363      	ADDWFC      FARG_displayInit_addr+2, 1, 1
;st7735.h,387 :: 		}
0x02BC	0xD7EA      	BRA         L_displayInit2
L_displayInit3:
;st7735.h,389 :: 		if(ms) {
0x02BE	0x5164      	MOVF        displayInit_ms_L0, 0, 1
0x02C0	0x1165      	IORWF       displayInit_ms_L0+1, 0, 1
0x02C2	0xE02F      	BZ          L_displayInit4
;st7735.h,390 :: 		ms = *addr++; // Read post-command delay time (ms)
0x02C4	0xFFF6C061  	MOVFF       FARG_displayInit_addr, TBLPTRL
0x02C8	0xFFF7C062  	MOVFF       FARG_displayInit_addr+1, TBLPTRH
0x02CC	0xFFF8C063  	MOVFF       FARG_displayInit_addr+2, TBLPTRU
0x02D0	0x0009      	TBLRD*+
0x02D2	0xF064CFF5  	MOVFF       TABLAT, displayInit_ms_L0
0x02D6	0x0E00      	MOVLW       0
0x02D8	0x6F65      	MOVWF       displayInit_ms_L0+1, 1
0x02DA	0x0E01      	MOVLW       1
0x02DC	0x2761      	ADDWF       FARG_displayInit_addr, 1, 1
0x02DE	0x0E00      	MOVLW       0
0x02E0	0x2362      	ADDWFC      FARG_displayInit_addr+1, 1, 1
0x02E2	0x2363      	ADDWFC      FARG_displayInit_addr+2, 1, 1
;st7735.h,391 :: 		if(ms == 255) ms = 500;     // If 255, delay for 500 ms
0x02E4	0x0E00      	MOVLW       0
0x02E6	0x1965      	XORWF       displayInit_ms_L0+1, 0, 1
0x02E8	0xE102      	BNZ         L__displayInit343
0x02EA	0x0EFF      	MOVLW       255
0x02EC	0x1964      	XORWF       displayInit_ms_L0, 0, 1
L__displayInit343:
0x02EE	0xE104      	BNZ         L_displayInit5
0x02F0	0x0EF4      	MOVLW       244
0x02F2	0x6F64      	MOVWF       displayInit_ms_L0, 1
0x02F4	0x0E01      	MOVLW       1
0x02F6	0x6F65      	MOVWF       displayInit_ms_L0+1, 1
L_displayInit5:
;st7735.h,392 :: 		while(ms--) delay_ms(1);
L_displayInit6:
0x02F8	0xF000C064  	MOVFF       displayInit_ms_L0, R0
0x02FC	0xF001C065  	MOVFF       displayInit_ms_L0+1, R1
0x0300	0x0E01      	MOVLW       1
0x0302	0x5F64      	SUBWF       displayInit_ms_L0, 1, 1
0x0304	0x0E00      	MOVLW       0
0x0306	0x5B65      	SUBWFB      displayInit_ms_L0+1, 1, 1
0x0308	0x5000      	MOVF        R0, 0 
0x030A	0x1001      	IORWF       R1, 0 
0x030C	0xE00A      	BZ          L_displayInit7
0x030E	0x0E06      	MOVLW       6
0x0310	0x6E0C      	MOVWF       R12, 0
0x0312	0x0E30      	MOVLW       48
0x0314	0x6E0D      	MOVWF       R13, 0
L_displayInit8:
0x0316	0x2E0D      	DECFSZ      R13, 1, 0
0x0318	0xD7FE      	BRA         L_displayInit8
0x031A	0x2E0C      	DECFSZ      R12, 1, 0
0x031C	0xD7FC      	BRA         L_displayInit8
0x031E	0x0000      	NOP
0x0320	0xD7EB      	BRA         L_displayInit6
L_displayInit7:
;st7735.h,393 :: 		}
L_displayInit4:
;st7735.h,394 :: 		}
0x0322	0xD786      	BRA         L_displayInit0
L_displayInit1:
;st7735.h,395 :: 		endWrite();
0x0324	0xDEBB      	RCALL       _endWrite
;st7735.h,396 :: 		}
L_end_displayInit:
0x0326	0x0012      	RETURN      0
; end of _displayInit
_setRotation:
;st7735.h,542 :: 		void setRotation(uint8_t m) {
;st7735.h,543 :: 		uint8_t madctl = 0;
0x0328	0x0100      	MOVLB       0
0x032A	0x6B60      	CLRF        setRotation_madctl_L0, 1
;st7735.h,545 :: 		rotation = m & 3; // can't be higher than 3
0x032C	0x0E03      	MOVLW       3
0x032E	0x145E      	ANDWF       FARG_setRotation_m, 0 
0x0330	0x6E15      	MOVWF       _rotation 
;st7735.h,548 :: 		if((tabcolor == INITR_144GREENTAB) || (tabcolor == INITR_HALLOWING)) {
0x0332	0x503B      	MOVF        _tabcolor, 0 
0x0334	0x0A01      	XORLW       1
0x0336	0xE004      	BZ          L__setRotation324
0x0338	0x503B      	MOVF        _tabcolor, 0 
0x033A	0x0A05      	XORLW       5
0x033C	0xE001      	BZ          L__setRotation324
0x033E	0xD00A      	BRA         L_setRotation33
L__setRotation324:
;st7735.h,550 :: 		_rowstart = (rotation < 2) ? 3 : 1;
0x0340	0x0E02      	MOVLW       2
0x0342	0x5C15      	SUBWF       _rotation, 0 
0x0344	0xE203      	BC          L_setRotation34
0x0346	0x0E03      	MOVLW       3
0x0348	0x6E5F      	MOVWF       ?FLOC___setRotationT52 
0x034A	0xD002      	BRA         L_setRotation35
L_setRotation34:
0x034C	0x0E01      	MOVLW       1
0x034E	0x6E5F      	MOVWF       ?FLOC___setRotationT52 
L_setRotation35:
0x0350	0xF017C05F  	MOVFF       ?FLOC___setRotationT52, __rowstart
;st7735.h,551 :: 		}
L_setRotation33:
;st7735.h,553 :: 		switch (rotation) {
0x0354	0xD093      	BRA         L_setRotation36
;st7735.h,554 :: 		case 0:
L_setRotation38:
;st7735.h,555 :: 		if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80)) {
0x0356	0x503B      	MOVF        _tabcolor, 0 
0x0358	0x0A02      	XORLW       2
0x035A	0xE004      	BZ          L__setRotation323
0x035C	0x503B      	MOVF        _tabcolor, 0 
0x035E	0x0A04      	XORLW       4
0x0360	0xE001      	BZ          L__setRotation323
0x0362	0xD003      	BRA         L_setRotation41
L__setRotation323:
;st7735.h,556 :: 		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
0x0364	0x0EC0      	MOVLW       192
0x0366	0x6F60      	MOVWF       setRotation_madctl_L0, 1
;st7735.h,557 :: 		} else {
0x0368	0xD002      	BRA         L_setRotation42
L_setRotation41:
;st7735.h,558 :: 		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST7735_MADCTL_BGR;
0x036A	0x0EC8      	MOVLW       200
0x036C	0x6F60      	MOVWF       setRotation_madctl_L0, 1
;st7735.h,559 :: 		}
L_setRotation42:
;st7735.h,561 :: 		if (tabcolor == INITR_144GREENTAB) {
0x036E	0x503B      	MOVF        _tabcolor, 0 
0x0370	0x0A01      	XORLW       1
0x0372	0xE105      	BNZ         L_setRotation43
;st7735.h,562 :: 		_height = ST7735_TFTHEIGHT_128;
0x0374	0x0E80      	MOVLW       128
0x0376	0x6E3C      	MOVWF       __height 
;st7735.h,563 :: 		_width  = ST7735_TFTWIDTH_128;
0x0378	0x0E80      	MOVLW       128
0x037A	0x6E3D      	MOVWF       __width 
;st7735.h,564 :: 		} else if (tabcolor == INITR_MINI160x80)  {
0x037C	0xD00C      	BRA         L_setRotation44
L_setRotation43:
0x037E	0x503B      	MOVF        _tabcolor, 0 
0x0380	0x0A04      	XORLW       4
0x0382	0xE105      	BNZ         L_setRotation45
;st7735.h,565 :: 		_height = ST7735_TFTHEIGHT_160;
0x0384	0x0EA0      	MOVLW       160
0x0386	0x6E3C      	MOVWF       __height 
;st7735.h,566 :: 		_width  = ST7735_TFTWIDTH_80;
0x0388	0x0E50      	MOVLW       80
0x038A	0x6E3D      	MOVWF       __width 
;st7735.h,567 :: 		} else {
0x038C	0xD004      	BRA         L_setRotation46
L_setRotation45:
;st7735.h,568 :: 		_height = ST7735_TFTHEIGHT_160;
0x038E	0x0EA0      	MOVLW       160
0x0390	0x6E3C      	MOVWF       __height 
;st7735.h,569 :: 		_width  = ST7735_TFTWIDTH_128;
0x0392	0x0E80      	MOVLW       128
0x0394	0x6E3D      	MOVWF       __width 
;st7735.h,570 :: 		}
L_setRotation46:
L_setRotation44:
;st7735.h,571 :: 		_xstart   = _colstart;
0x0396	0xF019C016  	MOVFF       __colstart, __xstart
;st7735.h,572 :: 		_ystart   = _rowstart;
0x039A	0xF018C017  	MOVFF       __rowstart, __ystart
;st7735.h,573 :: 		break;
0x039E	0xD07B      	BRA         L_setRotation37
;st7735.h,574 :: 		case 1:
L_setRotation47:
;st7735.h,575 :: 		if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80)) {
0x03A0	0x503B      	MOVF        _tabcolor, 0 
0x03A2	0x0A02      	XORLW       2
0x03A4	0xE004      	BZ          L__setRotation322
0x03A6	0x503B      	MOVF        _tabcolor, 0 
0x03A8	0x0A04      	XORLW       4
0x03AA	0xE001      	BZ          L__setRotation322
0x03AC	0xD003      	BRA         L_setRotation50
L__setRotation322:
;st7735.h,576 :: 		madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
0x03AE	0x0EA0      	MOVLW       160
0x03B0	0x6F60      	MOVWF       setRotation_madctl_L0, 1
;st7735.h,577 :: 		} else {
0x03B2	0xD002      	BRA         L_setRotation51
L_setRotation50:
;st7735.h,578 :: 		madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST7735_MADCTL_BGR;
0x03B4	0x0EA8      	MOVLW       168
0x03B6	0x6F60      	MOVWF       setRotation_madctl_L0, 1
;st7735.h,579 :: 		}
L_setRotation51:
;st7735.h,581 :: 		if (tabcolor == INITR_144GREENTAB)  {
0x03B8	0x503B      	MOVF        _tabcolor, 0 
0x03BA	0x0A01      	XORLW       1
0x03BC	0xE105      	BNZ         L_setRotation52
;st7735.h,582 :: 		_width  = ST7735_TFTHEIGHT_128;
0x03BE	0x0E80      	MOVLW       128
0x03C0	0x6E3D      	MOVWF       __width 
;st7735.h,583 :: 		_height = ST7735_TFTWIDTH_128;
0x03C2	0x0E80      	MOVLW       128
0x03C4	0x6E3C      	MOVWF       __height 
;st7735.h,584 :: 		} else if (tabcolor == INITR_MINI160x80)  {
0x03C6	0xD00C      	BRA         L_setRotation53
L_setRotation52:
0x03C8	0x503B      	MOVF        _tabcolor, 0 
0x03CA	0x0A04      	XORLW       4
0x03CC	0xE105      	BNZ         L_setRotation54
;st7735.h,585 :: 		_width  = ST7735_TFTHEIGHT_160;
0x03CE	0x0EA0      	MOVLW       160
0x03D0	0x6E3D      	MOVWF       __width 
;st7735.h,586 :: 		_height = ST7735_TFTWIDTH_80;
0x03D2	0x0E50      	MOVLW       80
0x03D4	0x6E3C      	MOVWF       __height 
;st7735.h,587 :: 		} else {
0x03D6	0xD004      	BRA         L_setRotation55
L_setRotation54:
;st7735.h,588 :: 		_width  = ST7735_TFTHEIGHT_160;
0x03D8	0x0EA0      	MOVLW       160
0x03DA	0x6E3D      	MOVWF       __width 
;st7735.h,589 :: 		_height = ST7735_TFTWIDTH_128;
0x03DC	0x0E80      	MOVLW       128
0x03DE	0x6E3C      	MOVWF       __height 
;st7735.h,590 :: 		}
L_setRotation55:
L_setRotation53:
;st7735.h,591 :: 		_ystart   = _colstart;
0x03E0	0xF018C016  	MOVFF       __colstart, __ystart
;st7735.h,592 :: 		_xstart   = _rowstart;
0x03E4	0xF019C017  	MOVFF       __rowstart, __xstart
;st7735.h,593 :: 		break;
0x03E8	0xD056      	BRA         L_setRotation37
;st7735.h,594 :: 		case 2:
L_setRotation56:
;st7735.h,595 :: 		if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80)) {
0x03EA	0x503B      	MOVF        _tabcolor, 0 
0x03EC	0x0A02      	XORLW       2
0x03EE	0xE004      	BZ          L__setRotation321
0x03F0	0x503B      	MOVF        _tabcolor, 0 
0x03F2	0x0A04      	XORLW       4
0x03F4	0xE001      	BZ          L__setRotation321
0x03F6	0xD002      	BRA         L_setRotation59
L__setRotation321:
;st7735.h,596 :: 		madctl = ST77XX_MADCTL_RGB;
0x03F8	0x6B60      	CLRF        setRotation_madctl_L0, 1
;st7735.h,597 :: 		} else {
0x03FA	0xD002      	BRA         L_setRotation60
L_setRotation59:
;st7735.h,598 :: 		madctl = ST7735_MADCTL_BGR;
0x03FC	0x0E08      	MOVLW       8
0x03FE	0x6F60      	MOVWF       setRotation_madctl_L0, 1
;st7735.h,599 :: 		}
L_setRotation60:
;st7735.h,601 :: 		if (tabcolor == INITR_144GREENTAB) {
0x0400	0x503B      	MOVF        _tabcolor, 0 
0x0402	0x0A01      	XORLW       1
0x0404	0xE105      	BNZ         L_setRotation61
;st7735.h,602 :: 		_height = ST7735_TFTHEIGHT_128;
0x0406	0x0E80      	MOVLW       128
0x0408	0x6E3C      	MOVWF       __height 
;st7735.h,603 :: 		_width  = ST7735_TFTWIDTH_128;
0x040A	0x0E80      	MOVLW       128
0x040C	0x6E3D      	MOVWF       __width 
;st7735.h,604 :: 		} else if (tabcolor == INITR_MINI160x80)  {
0x040E	0xD00C      	BRA         L_setRotation62
L_setRotation61:
0x0410	0x503B      	MOVF        _tabcolor, 0 
0x0412	0x0A04      	XORLW       4
0x0414	0xE105      	BNZ         L_setRotation63
;st7735.h,605 :: 		_height = ST7735_TFTHEIGHT_160;
0x0416	0x0EA0      	MOVLW       160
0x0418	0x6E3C      	MOVWF       __height 
;st7735.h,606 :: 		_width  = ST7735_TFTWIDTH_80;
0x041A	0x0E50      	MOVLW       80
0x041C	0x6E3D      	MOVWF       __width 
;st7735.h,607 :: 		} else {
0x041E	0xD004      	BRA         L_setRotation64
L_setRotation63:
;st7735.h,608 :: 		_height = ST7735_TFTHEIGHT_160;
0x0420	0x0EA0      	MOVLW       160
0x0422	0x6E3C      	MOVWF       __height 
;st7735.h,609 :: 		_width  = ST7735_TFTWIDTH_128;
0x0424	0x0E80      	MOVLW       128
0x0426	0x6E3D      	MOVWF       __width 
;st7735.h,610 :: 		}
L_setRotation64:
L_setRotation62:
;st7735.h,611 :: 		_xstart   = _colstart;
0x0428	0xF019C016  	MOVFF       __colstart, __xstart
;st7735.h,612 :: 		_ystart   = _rowstart;
0x042C	0xF018C017  	MOVFF       __rowstart, __ystart
;st7735.h,613 :: 		break;
0x0430	0xD032      	BRA         L_setRotation37
;st7735.h,614 :: 		case 3:
L_setRotation65:
;st7735.h,615 :: 		if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80)) {
0x0432	0x503B      	MOVF        _tabcolor, 0 
0x0434	0x0A02      	XORLW       2
0x0436	0xE004      	BZ          L__setRotation320
0x0438	0x503B      	MOVF        _tabcolor, 0 
0x043A	0x0A04      	XORLW       4
0x043C	0xE001      	BZ          L__setRotation320
0x043E	0xD003      	BRA         L_setRotation68
L__setRotation320:
;st7735.h,616 :: 		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
0x0440	0x0E60      	MOVLW       96
0x0442	0x6F60      	MOVWF       setRotation_madctl_L0, 1
;st7735.h,617 :: 		} else {
0x0444	0xD002      	BRA         L_setRotation69
L_setRotation68:
;st7735.h,618 :: 		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST7735_MADCTL_BGR;
0x0446	0x0E68      	MOVLW       104
0x0448	0x6F60      	MOVWF       setRotation_madctl_L0, 1
;st7735.h,619 :: 		}
L_setRotation69:
;st7735.h,621 :: 		if (tabcolor == INITR_144GREENTAB)  {
0x044A	0x503B      	MOVF        _tabcolor, 0 
0x044C	0x0A01      	XORLW       1
0x044E	0xE105      	BNZ         L_setRotation70
;st7735.h,622 :: 		_width  = ST7735_TFTHEIGHT_128;
0x0450	0x0E80      	MOVLW       128
0x0452	0x6E3D      	MOVWF       __width 
;st7735.h,623 :: 		_height = ST7735_TFTWIDTH_128;
0x0454	0x0E80      	MOVLW       128
0x0456	0x6E3C      	MOVWF       __height 
;st7735.h,624 :: 		} else if (tabcolor == INITR_MINI160x80)  {
0x0458	0xD00C      	BRA         L_setRotation71
L_setRotation70:
0x045A	0x503B      	MOVF        _tabcolor, 0 
0x045C	0x0A04      	XORLW       4
0x045E	0xE105      	BNZ         L_setRotation72
;st7735.h,625 :: 		_width  = ST7735_TFTHEIGHT_160;
0x0460	0x0EA0      	MOVLW       160
0x0462	0x6E3D      	MOVWF       __width 
;st7735.h,626 :: 		_height = ST7735_TFTWIDTH_80;
0x0464	0x0E50      	MOVLW       80
0x0466	0x6E3C      	MOVWF       __height 
;st7735.h,627 :: 		} else {
0x0468	0xD004      	BRA         L_setRotation73
L_setRotation72:
;st7735.h,628 :: 		_width  = ST7735_TFTHEIGHT_160;
0x046A	0x0EA0      	MOVLW       160
0x046C	0x6E3D      	MOVWF       __width 
;st7735.h,629 :: 		_height = ST7735_TFTWIDTH_128;
0x046E	0x0E80      	MOVLW       128
0x0470	0x6E3C      	MOVWF       __height 
;st7735.h,630 :: 		}
L_setRotation73:
L_setRotation71:
;st7735.h,631 :: 		_ystart   = _colstart;
0x0472	0xF018C016  	MOVFF       __colstart, __ystart
;st7735.h,632 :: 		_xstart   = _rowstart;
0x0476	0xF019C017  	MOVFF       __rowstart, __xstart
;st7735.h,633 :: 		break;
0x047A	0xD00D      	BRA         L_setRotation37
;st7735.h,634 :: 		}
L_setRotation36:
0x047C	0x5015      	MOVF        _rotation, 0 
0x047E	0x0A00      	XORLW       0
0x0480	0xB4D8      	BTFSC       STATUS, 2 
0x0482	0xD769      	BRA         L_setRotation38
0x0484	0x5015      	MOVF        _rotation, 0 
0x0486	0x0A01      	XORLW       1
0x0488	0xE08B      	BZ          L_setRotation47
0x048A	0x5015      	MOVF        _rotation, 0 
0x048C	0x0A02      	XORLW       2
0x048E	0xE0AD      	BZ          L_setRotation56
0x0490	0x5015      	MOVF        _rotation, 0 
0x0492	0x0A03      	XORLW       3
0x0494	0xE0CE      	BZ          L_setRotation65
L_setRotation37:
;st7735.h,636 :: 		startWrite();
0x0496	0xDE00      	RCALL       _startWrite
;st7735.h,637 :: 		writeCommand(ST77XX_MADCTL);
0x0498	0x0E36      	MOVLW       54
0x049A	0x6F6D      	MOVWF       FARG_writeCommand_cmd, 1
0x049C	0xDDC8      	RCALL       _writeCommand
;st7735.h,638 :: 		ST7735_SPI_Write(madctl);
0x049E	0xF06EC060  	MOVFF       setRotation_madctl_L0, FARG_SPI1_Write_data_
0x04A2	0xDDBC      	RCALL       _SPI1_Write
;st7735.h,639 :: 		endWrite();
0x04A4	0xDDFB      	RCALL       _endWrite
;st7735.h,640 :: 		}
L_end_setRotation:
0x04A6	0x0012      	RETURN      0
; end of _setRotation
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x04A8	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x04AA	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x04AE	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x04B0	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x04B2	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x04B4	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x04B6	0x0012      	RETURN      0
; end of ___CC2DW
_SPI1_Init:
;__Lib_SPI_c345d014.c,25 :: 		
;__Lib_SPI_c345d014.c,26 :: 		
0x04B8	0x9AC6      	BCF         SSP1CON1, 5 
;__Lib_SPI_c345d014.c,27 :: 		
0x04BA	0x0EFF      	MOVLW       _SPI1_Read
0x04BC	0x6E43      	MOVWF       _SPI_Rd_Ptr 
0x04BE	0x0EFF      	MOVLW       hi_addr(_SPI1_Read)
0x04C0	0x6E44      	MOVWF       _SPI_Rd_Ptr+1 
0x04C2	0x0EFF      	MOVLW       FARG_SPI1_Read_buffer
0x04C4	0x6E45      	MOVWF       _SPI_Rd_Ptr+2 
0x04C6	0x0EFF      	MOVLW       hi_addr(FARG_SPI1_Read_buffer)
0x04C8	0x6E46      	MOVWF       _SPI_Rd_Ptr+3 
;__Lib_SPI_c345d014.c,28 :: 		
0x04CA	0x0E1C      	MOVLW       _SPI1_Write
0x04CC	0x6E3F      	MOVWF       _SPI_Wr_Ptr 
0x04CE	0x0E00      	MOVLW       hi_addr(_SPI1_Write)
0x04D0	0x6E40      	MOVWF       _SPI_Wr_Ptr+1 
0x04D2	0x0E6E      	MOVLW       FARG_SPI1_Write_data_
0x04D4	0x6E41      	MOVWF       _SPI_Wr_Ptr+2 
0x04D6	0x0E00      	MOVLW       hi_addr(FARG_SPI1_Write_data_)
0x04D8	0x6E42      	MOVWF       _SPI_Wr_Ptr+3 
;__Lib_SPI_c345d014.c,30 :: 		
0x04DA	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;__Lib_SPI_c345d014.c,31 :: 		
0x04DC	0x9694      	BCF         TRISC3_bit, BitPos(TRISC3_bit+0) 
;__Lib_SPI_c345d014.c,32 :: 		
0x04DE	0x8894      	BSF         TRISC4_bit, BitPos(TRISC4_bit+0) 
;__Lib_SPI_c345d014.c,34 :: 		
0x04E0	0x6AC6      	CLRF        SSP1CON1 
;__Lib_SPI_c345d014.c,35 :: 		
0x04E2	0x0E40      	MOVLW       64
0x04E4	0x6EC7      	MOVWF       SSP1STAT 
;__Lib_SPI_c345d014.c,36 :: 		
0x04E6	0x8AC6      	BSF         SSP1CON1, 5 
;__Lib_SPI_c345d014.c,38 :: 		
L_end_SPI1_Init:
0x04E8	0x0012      	RETURN      0
; end of _SPI1_Init
_tft_initR:
;st7735.h,435 :: 		void tft_initR(uint8_t options) {
;st7735.h,437 :: 		TFT_RST = 1;
0x04EA	0x8083      	BSF         RD0_bit, BitPos(RD0_bit+0) 
;st7735.h,439 :: 		TFT_RST_DIR = 0;
0x04EC	0x9095      	BCF         TRISD0_bit, BitPos(TRISD0_bit+0) 
;st7735.h,441 :: 		delay_ms(100);
0x04EE	0x0E03      	MOVLW       3
0x04F0	0x6E0B      	MOVWF       R11, 0
0x04F2	0x0E08      	MOVLW       8
0x04F4	0x6E0C      	MOVWF       R12, 0
0x04F6	0x0E77      	MOVLW       119
0x04F8	0x6E0D      	MOVWF       R13, 0
L_tft_initR12:
0x04FA	0x2E0D      	DECFSZ      R13, 1, 0
0x04FC	0xD7FE      	BRA         L_tft_initR12
0x04FE	0x2E0C      	DECFSZ      R12, 1, 0
0x0500	0xD7FC      	BRA         L_tft_initR12
0x0502	0x2E0B      	DECFSZ      R11, 1, 0
0x0504	0xD7FA      	BRA         L_tft_initR12
;st7735.h,442 :: 		TFT_RST = 0;
0x0506	0x9083      	BCF         RD0_bit, BitPos(RD0_bit+0) 
;st7735.h,443 :: 		delay_ms(100);
0x0508	0x0E03      	MOVLW       3
0x050A	0x6E0B      	MOVWF       R11, 0
0x050C	0x0E08      	MOVLW       8
0x050E	0x6E0C      	MOVWF       R12, 0
0x0510	0x0E77      	MOVLW       119
0x0512	0x6E0D      	MOVWF       R13, 0
L_tft_initR13:
0x0514	0x2E0D      	DECFSZ      R13, 1, 0
0x0516	0xD7FE      	BRA         L_tft_initR13
0x0518	0x2E0C      	DECFSZ      R12, 1, 0
0x051A	0xD7FC      	BRA         L_tft_initR13
0x051C	0x2E0B      	DECFSZ      R11, 1, 0
0x051E	0xD7FA      	BRA         L_tft_initR13
;st7735.h,444 :: 		TFT_RST = 1;
0x0520	0x8083      	BSF         RD0_bit, BitPos(RD0_bit+0) 
;st7735.h,445 :: 		delay_ms(200);
0x0522	0x0E05      	MOVLW       5
0x0524	0x6E0B      	MOVWF       R11, 0
0x0526	0x0E0F      	MOVLW       15
0x0528	0x6E0C      	MOVWF       R12, 0
0x052A	0x0EF1      	MOVLW       241
0x052C	0x6E0D      	MOVWF       R13, 0
L_tft_initR14:
0x052E	0x2E0D      	DECFSZ      R13, 1, 0
0x0530	0xD7FE      	BRA         L_tft_initR14
0x0532	0x2E0C      	DECFSZ      R12, 1, 0
0x0534	0xD7FC      	BRA         L_tft_initR14
0x0536	0x2E0B      	DECFSZ      R11, 1, 0
0x0538	0xD7FA      	BRA         L_tft_initR14
;st7735.h,448 :: 		TFT_CS = 1;
0x053A	0x8283      	BSF         RD1_bit, BitPos(RD1_bit+0) 
;st7735.h,450 :: 		TFT_CS_DIR = 0;
0x053C	0x9295      	BCF         TRISD1_bit, BitPos(TRISD1_bit+0) 
;st7735.h,454 :: 		TFT_DC_DIR = 0;
0x053E	0x9495      	BCF         TRISD2_bit, BitPos(TRISD2_bit+0) 
;st7735.h,457 :: 		displayInit(Rcmd1);
0x0540	0x0E7A      	MOVLW       _Rcmd1
0x0542	0x0100      	MOVLB       0
0x0544	0x6F61      	MOVWF       FARG_displayInit_addr, 1
0x0546	0x0E0C      	MOVLW       hi_addr(_Rcmd1)
0x0548	0x6F62      	MOVWF       FARG_displayInit_addr+1, 1
0x054A	0x0E00      	MOVLW       higher_addr(_Rcmd1)
0x054C	0x6F63      	MOVWF       FARG_displayInit_addr+2, 1
0x054E	0xDE60      	RCALL       _displayInit
;st7735.h,458 :: 		if(options == INITR_GREENTAB) {
0x0550	0x504A      	MOVF        FARG_tft_initR_options, 0 
0x0552	0x0A00      	XORLW       0
0x0554	0xE10C      	BNZ         L_tft_initR15
;st7735.h,459 :: 		displayInit(Rcmd2green);
0x0556	0x0E13      	MOVLW       _Rcmd2green
0x0558	0x6F61      	MOVWF       FARG_displayInit_addr, 1
0x055A	0x0E0D      	MOVLW       hi_addr(_Rcmd2green)
0x055C	0x6F62      	MOVWF       FARG_displayInit_addr+1, 1
0x055E	0x0E00      	MOVLW       higher_addr(_Rcmd2green)
0x0560	0x6F63      	MOVWF       FARG_displayInit_addr+2, 1
0x0562	0xDE56      	RCALL       _displayInit
;st7735.h,460 :: 		_colstart = 2;
0x0564	0x0E02      	MOVLW       2
0x0566	0x6E16      	MOVWF       __colstart 
;st7735.h,461 :: 		_rowstart = 1;
0x0568	0x0E01      	MOVLW       1
0x056A	0x6E17      	MOVWF       __rowstart 
;st7735.h,462 :: 		} else if((options == INITR_144GREENTAB) || (options == INITR_HALLOWING)) {
0x056C	0xD030      	BRA         L_tft_initR16
L_tft_initR15:
0x056E	0x504A      	MOVF        FARG_tft_initR_options, 0 
0x0570	0x0A01      	XORLW       1
0x0572	0xE004      	BZ          L__tft_initR318
0x0574	0x504A      	MOVF        FARG_tft_initR_options, 0 
0x0576	0x0A05      	XORLW       5
0x0578	0xE001      	BZ          L__tft_initR318
0x057A	0xD010      	BRA         L_tft_initR19
L__tft_initR318:
;st7735.h,463 :: 		_height   = ST7735_TFTHEIGHT_128;
0x057C	0x0E80      	MOVLW       128
0x057E	0x6E3C      	MOVWF       __height 
;st7735.h,464 :: 		_width    = ST7735_TFTWIDTH_128;
0x0580	0x0E80      	MOVLW       128
0x0582	0x6E3D      	MOVWF       __width 
;st7735.h,465 :: 		displayInit(Rcmd2green144);
0x0584	0x0E20      	MOVLW       _Rcmd2green144
0x0586	0x6F61      	MOVWF       FARG_displayInit_addr, 1
0x0588	0x0E0D      	MOVLW       hi_addr(_Rcmd2green144)
0x058A	0x6F62      	MOVWF       FARG_displayInit_addr+1, 1
0x058C	0x0E00      	MOVLW       higher_addr(_Rcmd2green144)
0x058E	0x6F63      	MOVWF       FARG_displayInit_addr+2, 1
0x0590	0xDE3F      	RCALL       _displayInit
;st7735.h,466 :: 		_colstart = 2;
0x0592	0x0E02      	MOVLW       2
0x0594	0x6E16      	MOVWF       __colstart 
;st7735.h,467 :: 		_rowstart = 3; // For default rotation 0
0x0596	0x0E03      	MOVLW       3
0x0598	0x6E17      	MOVWF       __rowstart 
;st7735.h,468 :: 		} else if(options == INITR_MINI160x80) {
0x059A	0xD019      	BRA         L_tft_initR20
L_tft_initR19:
0x059C	0x504A      	MOVF        FARG_tft_initR_options, 0 
0x059E	0x0A04      	XORLW       4
0x05A0	0xE10F      	BNZ         L_tft_initR21
;st7735.h,469 :: 		_height   = ST7735_TFTHEIGHT_160;
0x05A2	0x0EA0      	MOVLW       160
0x05A4	0x6E3C      	MOVWF       __height 
;st7735.h,470 :: 		_width    = ST7735_TFTWIDTH_80;
0x05A6	0x0E50      	MOVLW       80
0x05A8	0x6E3D      	MOVWF       __width 
;st7735.h,471 :: 		displayInit(Rcmd2green160x80);
0x05AA	0x0E2D      	MOVLW       _Rcmd2green160x80
0x05AC	0x6F61      	MOVWF       FARG_displayInit_addr, 1
0x05AE	0x0E0D      	MOVLW       hi_addr(_Rcmd2green160x80)
0x05B0	0x6F62      	MOVWF       FARG_displayInit_addr+1, 1
0x05B2	0x0E00      	MOVLW       higher_addr(_Rcmd2green160x80)
0x05B4	0x6F63      	MOVWF       FARG_displayInit_addr+2, 1
0x05B6	0xDE2C      	RCALL       _displayInit
;st7735.h,472 :: 		_colstart = 24;
0x05B8	0x0E18      	MOVLW       24
0x05BA	0x6E16      	MOVWF       __colstart 
;st7735.h,473 :: 		_rowstart = 0;
0x05BC	0x6A17      	CLRF        __rowstart 
;st7735.h,474 :: 		} else {
0x05BE	0xD007      	BRA         L_tft_initR22
L_tft_initR21:
;st7735.h,476 :: 		displayInit(Rcmd2red);
0x05C0	0x0E06      	MOVLW       _Rcmd2red
0x05C2	0x6F61      	MOVWF       FARG_displayInit_addr, 1
0x05C4	0x0E0D      	MOVLW       hi_addr(_Rcmd2red)
0x05C6	0x6F62      	MOVWF       FARG_displayInit_addr+1, 1
0x05C8	0x0E00      	MOVLW       higher_addr(_Rcmd2red)
0x05CA	0x6F63      	MOVWF       FARG_displayInit_addr+2, 1
0x05CC	0xDE21      	RCALL       _displayInit
;st7735.h,477 :: 		}
L_tft_initR22:
L_tft_initR20:
L_tft_initR16:
;st7735.h,478 :: 		displayInit(Rcmd3);
0x05CE	0x0EB5      	MOVLW       _Rcmd3
0x05D0	0x6F61      	MOVWF       FARG_displayInit_addr, 1
0x05D2	0x0E0C      	MOVLW       hi_addr(_Rcmd3)
0x05D4	0x6F62      	MOVWF       FARG_displayInit_addr+1, 1
0x05D6	0x0E00      	MOVLW       higher_addr(_Rcmd3)
0x05D8	0x6F63      	MOVWF       FARG_displayInit_addr+2, 1
0x05DA	0xDE1A      	RCALL       _displayInit
;st7735.h,481 :: 		if((options == INITR_BLACKTAB) || (options == INITR_MINI160x80)) {
0x05DC	0x504A      	MOVF        FARG_tft_initR_options, 0 
0x05DE	0x0A02      	XORLW       2
0x05E0	0xE004      	BZ          L__tft_initR317
0x05E2	0x504A      	MOVF        FARG_tft_initR_options, 0 
0x05E4	0x0A04      	XORLW       4
0x05E6	0xE001      	BZ          L__tft_initR317
0x05E8	0xD009      	BRA         L_tft_initR25
L__tft_initR317:
;st7735.h,482 :: 		startWrite();
0x05EA	0xDD56      	RCALL       _startWrite
;st7735.h,483 :: 		writeCommand(ST77XX_MADCTL);
0x05EC	0x0E36      	MOVLW       54
0x05EE	0x6F6D      	MOVWF       FARG_writeCommand_cmd, 1
0x05F0	0xDD1E      	RCALL       _writeCommand
;st7735.h,484 :: 		ST7735_SPI_Write(0xC0);
0x05F2	0x0EC0      	MOVLW       192
0x05F4	0x0100      	MOVLB       0
0x05F6	0x6F6E      	MOVWF       FARG_SPI1_Write_data_, 1
0x05F8	0xDD11      	RCALL       _SPI1_Write
;st7735.h,485 :: 		endWrite();
0x05FA	0xDD50      	RCALL       _endWrite
;st7735.h,486 :: 		}
L_tft_initR25:
;st7735.h,488 :: 		if(options == INITR_HALLOWING) {
0x05FC	0x504A      	MOVF        FARG_tft_initR_options, 0 
0x05FE	0x0A05      	XORLW       5
0x0600	0xE106      	BNZ         L_tft_initR26
;st7735.h,490 :: 		tabcolor = INITR_144GREENTAB;
0x0602	0x0E01      	MOVLW       1
0x0604	0x6E3B      	MOVWF       _tabcolor 
;st7735.h,491 :: 		setRotation(2);
0x0606	0x0E02      	MOVLW       2
0x0608	0x6E5E      	MOVWF       FARG_setRotation_m 
0x060A	0xDE8E      	RCALL       _setRotation
;st7735.h,492 :: 		} else {
0x060C	0xD004      	BRA         L_tft_initR27
L_tft_initR26:
;st7735.h,493 :: 		tabcolor = options;
0x060E	0xF03BC04A  	MOVFF       FARG_tft_initR_options, _tabcolor
;st7735.h,494 :: 		setRotation(0);
0x0612	0x6A5E      	CLRF        FARG_setRotation_m 
0x0614	0xDE89      	RCALL       _setRotation
;st7735.h,495 :: 		}
L_tft_initR27:
;st7735.h,496 :: 		}
L_end_tft_initR:
0x0616	0x0012      	RETURN      0
; end of _tft_initR
_display_setTextWrap:
;gfx_library.h,972 :: 		void display_setTextWrap(bool w) {
;gfx_library.h,973 :: 		wrap = w;
0x0618	0xF01AC04A  	MOVFF       FARG_display_setTextWrap_w, _wrap
;gfx_library.h,974 :: 		}
L_end_display_setTextWrap:
0x061C	0x0012      	RETURN      0
; end of _display_setTextWrap
_fillScreen:
;st7735.h,728 :: 		void fillScreen(uint16_t color) {
;st7735.h,729 :: 		fillRect(0, 0, _width, _height, color);
0x061E	0x0100      	MOVLB       0
0x0620	0x6B61      	CLRF        FARG_fillRect_x, 1
0x0622	0x6B62      	CLRF        FARG_fillRect_y, 1
0x0624	0xF063C03D  	MOVFF       __width, FARG_fillRect_w
0x0628	0xF064C03C  	MOVFF       __height, FARG_fillRect_h
0x062C	0xF065C04A  	MOVFF       FARG_fillScreen_color, FARG_fillRect_color
0x0630	0xF066C04B  	MOVFF       FARG_fillScreen_color+1, FARG_fillRect_color+1
0x0634	0xDD5D      	RCALL       _fillRect
;st7735.h,730 :: 		}
L_end_fillScreen:
0x0636	0x0012      	RETURN      0
; end of _fillScreen
_display_drawBitmapV2:
;gfx_library.h,1088 :: 		uint16_t color) {
;gfx_library.h,1090 :: 		uint16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
0x0638	0x0E07      	MOVLW       7
0x063A	0x2451      	ADDWF       FARG_display_drawBitmapV2_w, 0 
0x063C	0x6E57      	MOVWF       display_drawBitmapV2_byteWidth_L0 
0x063E	0x0E00      	MOVLW       0
0x0640	0x2052      	ADDWFC      FARG_display_drawBitmapV2_w+1, 0 
0x0642	0x6E58      	MOVWF       display_drawBitmapV2_byteWidth_L0+1 
0x0644	0x3258      	RRCF        display_drawBitmapV2_byteWidth_L0+1, 1 
0x0646	0x3257      	RRCF        display_drawBitmapV2_byteWidth_L0, 1 
0x0648	0x9E58      	BCF         display_drawBitmapV2_byteWidth_L0+1, 7 
0x064A	0x3258      	RRCF        display_drawBitmapV2_byteWidth_L0+1, 1 
0x064C	0x3257      	RRCF        display_drawBitmapV2_byteWidth_L0, 1 
0x064E	0x9E58      	BCF         display_drawBitmapV2_byteWidth_L0+1, 7 
0x0650	0x3258      	RRCF        display_drawBitmapV2_byteWidth_L0+1, 1 
0x0652	0x3257      	RRCF        display_drawBitmapV2_byteWidth_L0, 1 
0x0654	0x9E58      	BCF         display_drawBitmapV2_byteWidth_L0+1, 7 
;gfx_library.h,1091 :: 		uint8_t _byte = 0;
0x0656	0x6A5D      	CLRF        display_drawBitmapV2__byte_L0 
;gfx_library.h,1094 :: 		for(j = 0; j < h; j++, y++) {
0x0658	0x6A5B      	CLRF        display_drawBitmapV2_j_L0 
0x065A	0x6A5C      	CLRF        display_drawBitmapV2_j_L0+1 
L_display_drawBitmapV2225:
0x065C	0x5054      	MOVF        FARG_display_drawBitmapV2_h+1, 0 
0x065E	0x5C5C      	SUBWF       display_drawBitmapV2_j_L0+1, 0 
0x0660	0xE102      	BNZ         L__display_drawBitmapV2453
0x0662	0x5053      	MOVF        FARG_display_drawBitmapV2_h, 0 
0x0664	0x5C5B      	SUBWF       display_drawBitmapV2_j_L0, 0 
L__display_drawBitmapV2453:
0x0666	0xE250      	BC          L_display_drawBitmapV2226
;gfx_library.h,1095 :: 		for( i = 0; i < w; i++ ) {
0x0668	0x6A59      	CLRF        display_drawBitmapV2_i_L0 
0x066A	0x6A5A      	CLRF        display_drawBitmapV2_i_L0+1 
L_display_drawBitmapV2228:
0x066C	0x5052      	MOVF        FARG_display_drawBitmapV2_w+1, 0 
0x066E	0x5C5A      	SUBWF       display_drawBitmapV2_i_L0+1, 0 
0x0670	0xE102      	BNZ         L__display_drawBitmapV2454
0x0672	0x5051      	MOVF        FARG_display_drawBitmapV2_w, 0 
0x0674	0x5C59      	SUBWF       display_drawBitmapV2_i_L0, 0 
L__display_drawBitmapV2454:
0x0676	0xE243      	BC          L_display_drawBitmapV2229
;gfx_library.h,1096 :: 		if(i & 7) _byte <<= 1;
0x0678	0x0E07      	MOVLW       7
0x067A	0x1459      	ANDWF       display_drawBitmapV2_i_L0, 0 
0x067C	0x6E00      	MOVWF       R0 
0x067E	0xF001C05A  	MOVFF       display_drawBitmapV2_i_L0+1, R1
0x0682	0x0E00      	MOVLW       0
0x0684	0x1601      	ANDWF       R1, 1 
0x0686	0x5000      	MOVF        R0, 0 
0x0688	0x1001      	IORWF       R1, 0 
0x068A	0xE003      	BZ          L_display_drawBitmapV2231
0x068C	0x365D      	RLCF        display_drawBitmapV2__byte_L0, 1 
0x068E	0x905D      	BCF         display_drawBitmapV2__byte_L0, 0 
0x0690	0xD026      	BRA         L_display_drawBitmapV2232
L_display_drawBitmapV2231:
;gfx_library.h,1097 :: 		else      _byte   = bitmap[j * byteWidth + i / 8];
0x0692	0xF000C05B  	MOVFF       display_drawBitmapV2_j_L0, R0
0x0696	0xF001C05C  	MOVFF       display_drawBitmapV2_j_L0+1, R1
0x069A	0xF004C057  	MOVFF       display_drawBitmapV2_byteWidth_L0, R4
0x069E	0xF005C058  	MOVFF       display_drawBitmapV2_byteWidth_L0+1, R5
0x06A2	0xDCFE      	RCALL       _Mul_16X16_U
0x06A4	0xF002C059  	MOVFF       display_drawBitmapV2_i_L0, R2
0x06A8	0xF003C05A  	MOVFF       display_drawBitmapV2_i_L0+1, R3
0x06AC	0x3203      	RRCF        R3, 1 
0x06AE	0x3202      	RRCF        R2, 1 
0x06B0	0x9E03      	BCF         R3, 7 
0x06B2	0x3203      	RRCF        R3, 1 
0x06B4	0x3202      	RRCF        R2, 1 
0x06B6	0x9E03      	BCF         R3, 7 
0x06B8	0x3203      	RRCF        R3, 1 
0x06BA	0x3202      	RRCF        R2, 1 
0x06BC	0x9E03      	BCF         R3, 7 
0x06BE	0x5002      	MOVF        R2, 0 
0x06C0	0x2600      	ADDWF       R0, 1 
0x06C2	0x5003      	MOVF        R3, 0 
0x06C4	0x2201      	ADDWFC      R1, 1 
0x06C6	0x5000      	MOVF        R0, 0 
0x06C8	0x244E      	ADDWF       FARG_display_drawBitmapV2_bitmap, 0 
0x06CA	0x6EF6      	MOVWF       TBLPTR 
0x06CC	0x5001      	MOVF        R1, 0 
0x06CE	0x204F      	ADDWFC      FARG_display_drawBitmapV2_bitmap+1, 0 
0x06D0	0x6EF7      	MOVWF       TBLPTR+1 
0x06D2	0x0E00      	MOVLW       0
0x06D4	0x2050      	ADDWFC      FARG_display_drawBitmapV2_bitmap+2, 0 
0x06D6	0x6EF8      	MOVWF       TBLPTR+2 
0x06D8	0x0009      	TBLRD*+
0x06DA	0xF05DCFF5  	MOVFF       TABLAT, display_drawBitmapV2__byte_L0
L_display_drawBitmapV2232:
;gfx_library.h,1098 :: 		if(_byte & 0x80)
0x06DE	0xAE5D      	BTFSS       display_drawBitmapV2__byte_L0, 7 
0x06E0	0xD00B      	BRA         L_display_drawBitmapV2233
;gfx_library.h,1099 :: 		display_drawPixel(x+i, y, color);
0x06E2	0x5059      	MOVF        display_drawBitmapV2_i_L0, 0 
0x06E4	0x244A      	ADDWF       FARG_display_drawBitmapV2_x, 0 
0x06E6	0x0100      	MOVLB       0
0x06E8	0x6F61      	MOVWF       FARG_drawPixel_x, 1
0x06EA	0xF062C04C  	MOVFF       FARG_display_drawBitmapV2_y, FARG_drawPixel_y
0x06EE	0xF063C055  	MOVFF       FARG_display_drawBitmapV2_color, FARG_drawPixel_color
0x06F2	0xF064C056  	MOVFF       FARG_display_drawBitmapV2_color+1, FARG_drawPixel_color+1
0x06F6	0xDD6E      	RCALL       _drawPixel
L_display_drawBitmapV2233:
;gfx_library.h,1095 :: 		for( i = 0; i < w; i++ ) {
0x06F8	0x4A59      	INFSNZ      display_drawBitmapV2_i_L0, 1 
0x06FA	0x2A5A      	INCF        display_drawBitmapV2_i_L0+1, 1 
;gfx_library.h,1100 :: 		}
0x06FC	0xD7B7      	BRA         L_display_drawBitmapV2228
L_display_drawBitmapV2229:
;gfx_library.h,1094 :: 		for(j = 0; j < h; j++, y++) {
0x06FE	0x4A5B      	INFSNZ      display_drawBitmapV2_j_L0, 1 
0x0700	0x2A5C      	INCF        display_drawBitmapV2_j_L0+1, 1 
0x0702	0x4A4C      	INFSNZ      FARG_display_drawBitmapV2_y, 1 
0x0704	0x2A4D      	INCF        FARG_display_drawBitmapV2_y+1, 1 
;gfx_library.h,1101 :: 		}
0x0706	0xD7AA      	BRA         L_display_drawBitmapV2225
L_display_drawBitmapV2226:
;gfx_library.h,1102 :: 		}
L_end_display_drawBitmapV2:
0x0708	0x0012      	RETURN      0
; end of _display_drawBitmapV2
_main:
0x070A	0xF006EC9D  	CALL        3386, 0
;fdene.c,17 :: 		void main()
;fdene.c,19 :: 		OSCCON = 0x72;   // set internal oscillator to 16MHz
0x070E	0x0E72      	MOVLW       114
0x0710	0x6ED3      	MOVWF       OSCCON 
;fdene.c,20 :: 		ANSELC = 0;      // configure all PORTC pins as digital
0x0712	0x010F      	MOVLB       15
0x0714	0x6B3A      	CLRF        ANSELC, 1
;fdene.c,21 :: 		ANSELD = 0;      // configure all PORTD pins as digital
0x0716	0x6B3B      	CLRF        ANSELD, 1
;fdene.c,22 :: 		SPI1_Init();       // initialize the SPI1 module with default settings
0x0718	0xDECF      	RCALL       _SPI1_Init
;fdene.c,25 :: 		tft_initR(INITR_BLACKTAB);      // Init ST7735S chip, black tab
0x071A	0x0E02      	MOVLW       2
0x071C	0x6E4A      	MOVWF       FARG_tft_initR_options 
0x071E	0xDEE5      	RCALL       _tft_initR
;fdene.c,26 :: 		display_setTextWrap(1);  // allow text to run off right edge
0x0720	0x0E01      	MOVLW       1
0x0722	0x6E4A      	MOVWF       FARG_display_setTextWrap_w 
0x0724	0xDF79      	RCALL       _display_setTextWrap
;fdene.c,27 :: 		display_fillScreen(ST7735_BLACK);
0x0726	0x6A4A      	CLRF        FARG_fillScreen_color 
0x0728	0x6A4B      	CLRF        FARG_fillScreen_color+1 
0x072A	0xDF79      	RCALL       _fillScreen
;fdene.c,39 :: 		display_drawBitmapV2(14,30,dene,100,100, ST7735_BLUE); //FOR pictures
0x072C	0x0E0E      	MOVLW       14
0x072E	0x6E4A      	MOVWF       FARG_display_drawBitmapV2_x 
0x0730	0x0E00      	MOVLW       0
0x0732	0x6E4B      	MOVWF       FARG_display_drawBitmapV2_x+1 
0x0734	0x0E1E      	MOVLW       30
0x0736	0x6E4C      	MOVWF       FARG_display_drawBitmapV2_y 
0x0738	0x0E00      	MOVLW       0
0x073A	0x6E4D      	MOVWF       FARG_display_drawBitmapV2_y+1 
0x073C	0x0E66      	MOVLW       _dene
0x073E	0x6E4E      	MOVWF       FARG_display_drawBitmapV2_bitmap 
0x0740	0x0E07      	MOVLW       hi_addr(_dene)
0x0742	0x6E4F      	MOVWF       FARG_display_drawBitmapV2_bitmap+1 
0x0744	0x0E00      	MOVLW       higher_addr(_dene)
0x0746	0x6E50      	MOVWF       FARG_display_drawBitmapV2_bitmap+2 
0x0748	0x0E64      	MOVLW       100
0x074A	0x6E51      	MOVWF       FARG_display_drawBitmapV2_w 
0x074C	0x0E00      	MOVLW       0
0x074E	0x6E52      	MOVWF       FARG_display_drawBitmapV2_w+1 
0x0750	0x0E64      	MOVLW       100
0x0752	0x6E53      	MOVWF       FARG_display_drawBitmapV2_h 
0x0754	0x0E00      	MOVLW       0
0x0756	0x6E54      	MOVWF       FARG_display_drawBitmapV2_h+1 
0x0758	0x0E1F      	MOVLW       31
0x075A	0x6E55      	MOVWF       FARG_display_drawBitmapV2_color 
0x075C	0x0E00      	MOVLW       0
0x075E	0x6E56      	MOVWF       FARG_display_drawBitmapV2_color+1 
0x0760	0xDF6B      	RCALL       _display_drawBitmapV2
;fdene.c,41 :: 		while(1) {
L_main315:
;fdene.c,55 :: 		}
0x0762	0xD7FF      	BRA         L_main315
;fdene.c,57 :: 		}
L_end_main:
0x0764	0xD7FF      	BRA         $+0
; end of _main
0x0D3A	0xF015EE10  	LFSR        1, 21
0x0D3E	0x0E26      	MOVLW       38
0x0D40	0x6E00      	MOVWF       R0 
0x0D42	0x0E01      	MOVLW       1
0x0D44	0x6E01      	MOVWF       R1 
0x0D46	0x0EE0      	MOVLW       224
0x0D48	0x6EF6      	MOVWF       TBLPTR 
0x0D4A	0x0E0C      	MOVLW       12
0x0D4C	0x6EF7      	MOVWF       TBLPTRH 
0x0D4E	0x0E00      	MOVLW       0
0x0D50	0x6EF8      	MOVWF       TBLPTRU 
0x0D52	0xF002EC54  	CALL        1192, 0
0x0D56	0x0012      	RETURN      0
;fdene.c,1 :: _dene
0x0766	0x0000 ;_dene+0
0x0768	0x0000 ;_dene+2
0x076A	0x0000 ;_dene+4
0x076C	0x0000 ;_dene+6
0x076E	0x0000 ;_dene+8
0x0770	0x0000 ;_dene+10
0x0772	0x0000 ;_dene+12
0x0774	0x0000 ;_dene+14
0x0776	0x0000 ;_dene+16
0x0778	0x0000 ;_dene+18
0x077A	0x0000 ;_dene+20
0x077C	0x0000 ;_dene+22
0x077E	0x0000 ;_dene+24
0x0780	0x0000 ;_dene+26
0x0782	0x0000 ;_dene+28
0x0784	0x0000 ;_dene+30
0x0786	0x0000 ;_dene+32
0x0788	0x0000 ;_dene+34
0x078A	0x0000 ;_dene+36
0x078C	0x0000 ;_dene+38
0x078E	0x0000 ;_dene+40
0x0790	0x0000 ;_dene+42
0x0792	0x0000 ;_dene+44
0x0794	0x0000 ;_dene+46
0x0796	0x0000 ;_dene+48
0x0798	0x0000 ;_dene+50
0x079A	0x0000 ;_dene+52
0x079C	0x0000 ;_dene+54
0x079E	0x0000 ;_dene+56
0x07A0	0x0000 ;_dene+58
0x07A2	0x0000 ;_dene+60
0x07A4	0x0000 ;_dene+62
0x07A6	0x0000 ;_dene+64
0x07A8	0x0000 ;_dene+66
0x07AA	0x0000 ;_dene+68
0x07AC	0x0000 ;_dene+70
0x07AE	0x0000 ;_dene+72
0x07B0	0x0000 ;_dene+74
0x07B2	0x0000 ;_dene+76
0x07B4	0x0000 ;_dene+78
0x07B6	0x0000 ;_dene+80
0x07B8	0x1F00 ;_dene+82
0x07BA	0x00FF ;_dene+84
0x07BC	0x0000 ;_dene+86
0x07BE	0x0000 ;_dene+88
0x07C0	0x0000 ;_dene+90
0x07C2	0x0000 ;_dene+92
0x07C4	0x0100 ;_dene+94
0x07C6	0xFFFF ;_dene+96
0x07C8	0x00F0 ;_dene+98
0x07CA	0x0000 ;_dene+100
0x07CC	0x0000 ;_dene+102
0x07CE	0x0000 ;_dene+104
0x07D0	0x0000 ;_dene+106
0x07D2	0xFF0F ;_dene+108
0x07D4	0xFEFF ;_dene+110
0x07D6	0x0000 ;_dene+112
0x07D8	0x0000 ;_dene+114
0x07DA	0x0000 ;_dene+116
0x07DC	0x0000 ;_dene+118
0x07DE	0x3F00 ;_dene+120
0x07E0	0xFFFF ;_dene+122
0x07E2	0x80FF ;_dene+124
0x07E4	0x0000 ;_dene+126
0x07E6	0x0000 ;_dene+128
0x07E8	0x0000 ;_dene+130
0x07EA	0x0000 ;_dene+132
0x07EC	0xFF7F ;_dene+134
0x07EE	0xFF1F ;_dene+136
0x07F0	0x00E0 ;_dene+138
0x07F2	0x0000 ;_dene+140
0x07F4	0x0000 ;_dene+142
0x07F6	0x0000 ;_dene+144
0x07F8	0xFF01 ;_dene+146
0x07FA	0x00E0 ;_dene+148
0x07FC	0xF03F ;_dene+150
0x07FE	0x0000 ;_dene+152
0x0800	0x0000 ;_dene+154
0x0802	0x0000 ;_dene+156
0x0804	0x0700 ;_dene+158
0x0806	0x00FF ;_dene+160
0x0808	0x0700 ;_dene+162
0x080A	0x00FC ;_dene+164
0x080C	0x0000 ;_dene+166
0x080E	0x0000 ;_dene+168
0x0810	0x0000 ;_dene+170
0x0812	0xF80F ;_dene+172
0x0814	0x0000 ;_dene+174
0x0816	0xFE01 ;_dene+176
0x0818	0x0000 ;_dene+178
0x081A	0x0000 ;_dene+180
0x081C	0x0000 ;_dene+182
0x081E	0x1F00 ;_dene+184
0x0820	0x00E0 ;_dene+186
0x0822	0x0000 ;_dene+188
0x0824	0x007F ;_dene+190
0x0826	0x0000 ;_dene+192
0x0828	0x0000 ;_dene+194
0x082A	0x0000 ;_dene+196
0x082C	0xC03F ;_dene+198
0x082E	0x0000 ;_dene+200
0x0830	0x1F00 ;_dene+202
0x0832	0x0080 ;_dene+204
0x0834	0x0000 ;_dene+206
0x0836	0x0000 ;_dene+208
0x0838	0x7F00 ;_dene+210
0x083A	0x0000 ;_dene+212
0x083C	0x0000 ;_dene+214
0x083E	0xC00F ;_dene+216
0x0840	0x0000 ;_dene+218
0x0842	0x0000 ;_dene+220
0x0844	0x0000 ;_dene+222
0x0846	0x00FE ;_dene+224
0x0848	0x0000 ;_dene+226
0x084A	0x0700 ;_dene+228
0x084C	0x00E0 ;_dene+230
0x084E	0x0000 ;_dene+232
0x0850	0x0000 ;_dene+234
0x0852	0xFC01 ;_dene+236
0x0854	0x0000 ;_dene+238
0x0856	0x0000 ;_dene+240
0x0858	0xF003 ;_dene+242
0x085A	0x0000 ;_dene+244
0x085C	0x0000 ;_dene+246
0x085E	0x0100 ;_dene+248
0x0860	0x00F8 ;_dene+250
0x0862	0x0000 ;_dene+252
0x0864	0x0000 ;_dene+254
0x0866	0x00F8 ;_dene+256
0x0868	0x0000 ;_dene+258
0x086A	0x0000 ;_dene+260
0x086C	0xF003 ;_dene+262
0x086E	0x0000 ;_dene+264
0x0870	0x0000 ;_dene+266
0x0872	0x7800 ;_dene+268
0x0874	0x0000 ;_dene+270
0x0876	0x0000 ;_dene+272
0x0878	0x0700 ;_dene+274
0x087A	0x00E0 ;_dene+276
0x087C	0x0000 ;_dene+278
0x087E	0x0000 ;_dene+280
0x0880	0x003C ;_dene+282
0x0882	0x0000 ;_dene+284
0x0884	0x0000 ;_dene+286
0x0886	0xC007 ;_dene+288
0x0888	0x0000 ;_dene+290
0x088A	0x0000 ;_dene+292
0x088C	0x3E00 ;_dene+294
0x088E	0x0000 ;_dene+296
0x0890	0x0000 ;_dene+298
0x0892	0x0F00 ;_dene+300
0x0894	0x0080 ;_dene+302
0x0896	0x0000 ;_dene+304
0x0898	0x0000 ;_dene+306
0x089A	0x001E ;_dene+308
0x089C	0x0000 ;_dene+310
0x089E	0x0000 ;_dene+312
0x08A0	0x801F ;_dene+314
0x08A2	0x0000 ;_dene+316
0x08A4	0x0000 ;_dene+318
0x08A6	0x0F00 ;_dene+320
0x08A8	0x0000 ;_dene+322
0x08AA	0x0000 ;_dene+324
0x08AC	0x1F00 ;_dene+326
0x08AE	0x0000 ;_dene+328
0x08B0	0x0000 ;_dene+330
0x08B2	0x0000 ;_dene+332
0x08B4	0x000F ;_dene+334
0x08B6	0x0000 ;_dene+336
0x08B8	0x0000 ;_dene+338
0x08BA	0x001F ;_dene+340
0x08BC	0x0000 ;_dene+342
0x08BE	0x0000 ;_dene+344
0x08C0	0x0700 ;_dene+346
0x08C2	0x0080 ;_dene+348
0x08C4	0x0000 ;_dene+350
0x08C6	0x3E00 ;_dene+352
0x08C8	0x0000 ;_dene+354
0x08CA	0x0000 ;_dene+356
0x08CC	0x0000 ;_dene+358
0x08CE	0x8007 ;_dene+360
0x08D0	0x0000 ;_dene+362
0x08D2	0x0000 ;_dene+364
0x08D4	0x003E ;_dene+366
0x08D6	0x0000 ;_dene+368
0x08D8	0x0000 ;_dene+370
0x08DA	0x0300 ;_dene+372
0x08DC	0x0080 ;_dene+374
0x08DE	0x0000 ;_dene+376
0x08E0	0x0000 ;_dene+378
0x08E2	0x0000 ;_dene+380
0x08E4	0x0000 ;_dene+382
0x08E6	0x0000 ;_dene+384
0x08E8	0xC003 ;_dene+386
0x08EA	0x0000 ;_dene+388
0x08EC	0x0000 ;_dene+390
0x08EE	0xFF0F ;_dene+392
0x08F0	0x00FF ;_dene+394
0x08F2	0x0000 ;_dene+396
0x08F4	0x0100 ;_dene+398
0x08F6	0x00C0 ;_dene+400
0x08F8	0x0000 ;_dene+402
0x08FA	0xFF00 ;_dene+404
0x08FC	0xFFFF ;_dene+406
0x08FE	0x00F8 ;_dene+408
0x0900	0x0000 ;_dene+410
0x0902	0xC001 ;_dene+412
0x0904	0x0000 ;_dene+414
0x0906	0x0300 ;_dene+416
0x0908	0xFFFF ;_dene+418
0x090A	0xFFFF ;_dene+420
0x090C	0x0080 ;_dene+422
0x090E	0x0100 ;_dene+424
0x0910	0x00C0 ;_dene+426
0x0912	0x0000 ;_dene+428
0x0914	0xFF0F ;_dene+430
0x0916	0xFFFF ;_dene+432
0x0918	0xF0FF ;_dene+434
0x091A	0x0000 ;_dene+436
0x091C	0xC000 ;_dene+438
0x091E	0x0000 ;_dene+440
0x0920	0x3F00 ;_dene+442
0x0922	0xFFFF ;_dene+444
0x0924	0xFFFF ;_dene+446
0x0926	0x00FF ;_dene+448
0x0928	0x0000 ;_dene+450
0x092A	0x00E0 ;_dene+452
0x092C	0x0000 ;_dene+454
0x092E	0xFFFF ;_dene+456
0x0930	0xFFFF ;_dene+458
0x0932	0xFFFF ;_dene+460
0x0934	0x00E0 ;_dene+462
0x0936	0xE000 ;_dene+464
0x0938	0x0000 ;_dene+466
0x093A	0xFF01 ;_dene+468
0x093C	0xFFFF ;_dene+470
0x093E	0xFFFF ;_dene+472
0x0940	0xFCFF ;_dene+474
0x0942	0x0000 ;_dene+476
0x0944	0x00E0 ;_dene+478
0x0946	0x0300 ;_dene+480
0x0948	0xFFFF ;_dene+482
0x094A	0xFFFF ;_dene+484
0x094C	0xFFFF ;_dene+486
0x094E	0xC0FF ;_dene+488
0x0950	0xE000 ;_dene+490
0x0952	0x7000 ;_dene+492
0x0954	0xFF07 ;_dene+494
0x0956	0xFFFF ;_dene+496
0x0958	0xFFFF ;_dene+498
0x095A	0xFFFF ;_dene+500
0x095C	0x00FC ;_dene+502
0x095E	0x0760 ;_dene+504
0x0960	0x0FF0 ;_dene+506
0x0962	0xFFFF ;_dene+508
0x0964	0xFFFF ;_dene+510
0x0966	0xFFFF ;_dene+512
0x0968	0xFFFF ;_dene+514
0x096A	0x00C0 ;_dene+516
0x096C	0xE03F ;_dene+518
0x096E	0xF01F ;_dene+520
0x0970	0x1F00 ;_dene+522
0x0972	0xFFFF ;_dene+524
0x0974	0xFFFF ;_dene+526
0x0976	0xFFFF ;_dene+528
0x0978	0xFFFF ;_dene+530
0x097A	0x3FC0 ;_dene+532
0x097C	0x0000 ;_dene+534
0x097E	0xFF00 ;_dene+536
0x0980	0xFFFF ;_dene+538
0x0982	0xFFFF ;_dene+540
0x0984	0xFFFF ;_dene+542
0x0986	0x80FF ;_dene+544
0x0988	0x0070 ;_dene+546
0x098A	0x00F0 ;_dene+548
0x098C	0xFF0F ;_dene+550
0x098E	0xFFFF ;_dene+552
0x0990	0xFFFF ;_dene+554
0x0992	0xFFFF ;_dene+556
0x0994	0x0000 ;_dene+558
0x0996	0x7000 ;_dene+560
0x0998	0x0100 ;_dene+562
0x099A	0xFFFF ;_dene+564
0x099C	0xFFFF ;_dene+566
0x099E	0xFFFF ;_dene+568
0x09A0	0x00FC ;_dene+570
0x09A2	0x0000 ;_dene+572
0x09A4	0x0070 ;_dene+574
0x09A6	0x1F00 ;_dene+576
0x09A8	0xFFFF ;_dene+578
0x09AA	0xFFFF ;_dene+580
0x09AC	0xF8FF ;_dene+582
0x09AE	0x0000 ;_dene+584
0x09B0	0x7000 ;_dene+586
0x09B2	0x0000 ;_dene+588
0x09B4	0xFF03 ;_dene+590
0x09B6	0xFFFF ;_dene+592
0x09B8	0xFFFF ;_dene+594
0x09BA	0x00E0 ;_dene+596
0x09BC	0x0000 ;_dene+598
0x09BE	0x0070 ;_dene+600
0x09C0	0x0000 ;_dene+602
0x09C2	0xFF7F ;_dene+604
0x09C4	0xFFFF ;_dene+606
0x09C6	0xC0FF ;_dene+608
0x09C8	0x0000 ;_dene+610
0x09CA	0x7800 ;_dene+612
0x09CC	0x0000 ;_dene+614
0x09CE	0x0700 ;_dene+616
0x09D0	0xFFFF ;_dene+618
0x09D2	0xFFFF ;_dene+620
0x09D4	0x0000 ;_dene+622
0x09D6	0x0000 ;_dene+624
0x09D8	0x0038 ;_dene+626
0x09DA	0x0000 ;_dene+628
0x09DC	0xFF00 ;_dene+630
0x09DE	0xFFFF ;_dene+632
0x09E0	0x00F8 ;_dene+634
0x09E2	0x0000 ;_dene+636
0x09E4	0x3800 ;_dene+638
0x09E6	0x0000 ;_dene+640
0x09E8	0x0000 ;_dene+642
0x09EA	0xFF03 ;_dene+644
0x09EC	0xC0FF ;_dene+646
0x09EE	0x0000 ;_dene+648
0x09F0	0x0000 ;_dene+650
0x09F2	0x0038 ;_dene+652
0x09F4	0x0000 ;_dene+654
0x09F6	0x0000 ;_dene+656
0x09F8	0x0000 ;_dene+658
0x09FA	0x0000 ;_dene+660
0x09FC	0x0000 ;_dene+662
0x09FE	0x1C00 ;_dene+664
0x0A00	0x0000 ;_dene+666
0x0A02	0x0000 ;_dene+668
0x0A04	0x0000 ;_dene+670
0x0A06	0x0001 ;_dene+672
0x0A08	0x0000 ;_dene+674
0x0A0A	0x0000 ;_dene+676
0x0A0C	0x001C ;_dene+678
0x0A0E	0x0000 ;_dene+680
0x0A10	0x0000 ;_dene+682
0x0A12	0x0300 ;_dene+684
0x0A14	0x0000 ;_dene+686
0x0A16	0x0000 ;_dene+688
0x0A18	0x0E00 ;_dene+690
0x0A1A	0x0000 ;_dene+692
0x0A1C	0x0000 ;_dene+694
0x0A1E	0x0000 ;_dene+696
0x0A20	0x0003 ;_dene+698
0x0A22	0x0000 ;_dene+700
0x0A24	0x0000 ;_dene+702
0x0A26	0x000E ;_dene+704
0x0A28	0x0000 ;_dene+706
0x0A2A	0x0000 ;_dene+708
0x0A2C	0x0600 ;_dene+710
0x0A2E	0x0000 ;_dene+712
0x0A30	0x0000 ;_dene+714
0x0A32	0x0700 ;_dene+716
0x0A34	0x0000 ;_dene+718
0x0A36	0x0000 ;_dene+720
0x0A38	0x0000 ;_dene+722
0x0A3A	0x0006 ;_dene+724
0x0A3C	0x0000 ;_dene+726
0x0A3E	0x0000 ;_dene+728
0x0A40	0x0007 ;_dene+730
0x0A42	0x0000 ;_dene+732
0x0A44	0x0000 ;_dene+734
0x0A46	0x0C00 ;_dene+736
0x0A48	0x0000 ;_dene+738
0x0A4A	0x0000 ;_dene+740
0x0A4C	0x0300 ;_dene+742
0x0A4E	0x0080 ;_dene+744
0x0A50	0x0000 ;_dene+746
0x0A52	0x0000 ;_dene+748
0x0A54	0x0008 ;_dene+750
0x0A56	0x0000 ;_dene+752
0x0A58	0x0000 ;_dene+754
0x0A5A	0xC003 ;_dene+756
0x0A5C	0x0000 ;_dene+758
0x0A5E	0x0000 ;_dene+760
0x0A60	0x1800 ;_dene+762
0x0A62	0x0000 ;_dene+764
0x0A64	0x0000 ;_dene+766
0x0A66	0x0100 ;_dene+768
0x0A68	0x00C0 ;_dene+770
0x0A6A	0x0000 ;_dene+772
0x0A6C	0x0000 ;_dene+774
0x0A6E	0x0030 ;_dene+776
0x0A70	0x0000 ;_dene+778
0x0A72	0x0000 ;_dene+780
0x0A74	0xE000 ;_dene+782
0x0A76	0x0000 ;_dene+784
0x0A78	0x0000 ;_dene+786
0x0A7A	0x6000 ;_dene+788
0x0A7C	0x0000 ;_dene+790
0x0A7E	0x0000 ;_dene+792
0x0A80	0x0000 ;_dene+794
0x0A82	0x0070 ;_dene+796
0x0A84	0x0000 ;_dene+798
0x0A86	0x0000 ;_dene+800
0x0A88	0x00C0 ;_dene+802
0x0A8A	0x0000 ;_dene+804
0x0A8C	0x0000 ;_dene+806
0x0A8E	0x3800 ;_dene+808
0x0A90	0x0000 ;_dene+810
0x0A92	0x0000 ;_dene+812
0x0A94	0x8000 ;_dene+814
0x0A96	0x0000 ;_dene+816
0x0A98	0x0000 ;_dene+818
0x0A9A	0x0000 ;_dene+820
0x0A9C	0x003C ;_dene+822
0x0A9E	0x0000 ;_dene+824
0x0AA0	0x0300 ;_dene+826
0x0AA2	0x0000 ;_dene+828
0x0AA4	0x0000 ;_dene+830
0x0AA6	0x0000 ;_dene+832
0x0AA8	0x0E00 ;_dene+834
0x0AAA	0x0000 ;_dene+836
0x0AAC	0x0000 ;_dene+838
0x0AAE	0x0006 ;_dene+840
0x0AB0	0x0000 ;_dene+842
0x0AB2	0x0000 ;_dene+844
0x0AB4	0x0000 ;_dene+846
0x0AB6	0x0007 ;_dene+848
0x0AB8	0x0000 ;_dene+850
0x0ABA	0x0C00 ;_dene+852
0x0ABC	0x0000 ;_dene+854
0x0ABE	0x0000 ;_dene+856
0x0AC0	0x0000 ;_dene+858
0x0AC2	0x0500 ;_dene+860
0x0AC4	0x00C0 ;_dene+862
0x0AC6	0x0000 ;_dene+864
0x0AC8	0x0018 ;_dene+866
0x0ACA	0x0000 ;_dene+868
0x0ACC	0x0000 ;_dene+870
0x0ACE	0x0000 ;_dene+872
0x0AD0	0xF000 ;_dene+874
0x0AD2	0x0000 ;_dene+876
0x0AD4	0x6000 ;_dene+878
0x0AD6	0x0000 ;_dene+880
0x0AD8	0x0000 ;_dene+882
0x0ADA	0x0000 ;_dene+884
0x0ADC	0x0000 ;_dene+886
0x0ADE	0x003E ;_dene+888
0x0AE0	0x0100 ;_dene+890
0x0AE2	0x0080 ;_dene+892
0x0AE4	0x0000 ;_dene+894
0x0AE6	0x0000 ;_dene+896
0x0AE8	0x0000 ;_dene+898
0x0AEA	0x0F00 ;_dene+900
0x0AEC	0x0000 ;_dene+902
0x0AEE	0x0006 ;_dene+904
0x0AF0	0x0000 ;_dene+906
0x0AF2	0x0000 ;_dene+908
0x0AF4	0x0000 ;_dene+910
0x0AF6	0x0000 ;_dene+912
0x0AF8	0xE001 ;_dene+914
0x0AFA	0x7000 ;_dene+916
0x0AFC	0x0000 ;_dene+918
0x0AFE	0x0000 ;_dene+920
0x0B00	0x0000 ;_dene+922
0x0B02	0x0000 ;_dene+924
0x0B04	0x0000 ;_dene+926
0x0B06	0xFF3F ;_dene+928
0x0B08	0x0080 ;_dene+930
0x0B0A	0x0000 ;_dene+932
0x0B0C	0x0000 ;_dene+934
0x0B0E	0x0000 ;_dene+936
0x0B10	0x0000 ;_dene+938
0x0B12	0x0000 ;_dene+940
0x0B14	0x0000 ;_dene+942
0x0B16	0x0000 ;_dene+944
0x0B18	0x0000 ;_dene+946
0x0B1A	0x0000 ;_dene+948
0x0B1C	0x0000 ;_dene+950
0x0B1E	0x0000 ;_dene+952
0x0B20	0x0000 ;_dene+954
0x0B22	0x0000 ;_dene+956
0x0B24	0x0000 ;_dene+958
0x0B26	0x0000 ;_dene+960
0x0B28	0x0000 ;_dene+962
0x0B2A	0x0000 ;_dene+964
0x0B2C	0x0000 ;_dene+966
0x0B2E	0x0000 ;_dene+968
0x0B30	0x0000 ;_dene+970
0x0B32	0x0000 ;_dene+972
0x0B34	0x0000 ;_dene+974
0x0B36	0x0000 ;_dene+976
0x0B38	0x0000 ;_dene+978
0x0B3A	0x0000 ;_dene+980
0x0B3C	0x0000 ;_dene+982
0x0B3E	0x0000 ;_dene+984
0x0B40	0x0000 ;_dene+986
0x0B42	0x0000 ;_dene+988
0x0B44	0x0000 ;_dene+990
0x0B46	0x0000 ;_dene+992
0x0B48	0x0000 ;_dene+994
0x0B4A	0x0000 ;_dene+996
0x0B4C	0x0000 ;_dene+998
0x0B4E	0x0000 ;_dene+1000
0x0B50	0x0000 ;_dene+1002
0x0B52	0x0000 ;_dene+1004
0x0B54	0x0000 ;_dene+1006
0x0B56	0x0000 ;_dene+1008
0x0B58	0x0000 ;_dene+1010
0x0B5A	0x0000 ;_dene+1012
0x0B5C	0x0000 ;_dene+1014
0x0B5E	0x0000 ;_dene+1016
0x0B60	0x0000 ;_dene+1018
0x0B62	0x0000 ;_dene+1020
0x0B64	0x0000 ;_dene+1022
0x0B66	0x0000 ;_dene+1024
0x0B68	0x0000 ;_dene+1026
0x0B6A	0x0000 ;_dene+1028
0x0B6C	0x0000 ;_dene+1030
0x0B6E	0x0000 ;_dene+1032
0x0B70	0x0000 ;_dene+1034
0x0B72	0x0000 ;_dene+1036
0x0B74	0x0000 ;_dene+1038
0x0B76	0x0000 ;_dene+1040
0x0B78	0x0000 ;_dene+1042
0x0B7A	0x0000 ;_dene+1044
0x0B7C	0x0000 ;_dene+1046
0x0B7E	0x0000 ;_dene+1048
0x0B80	0x0000 ;_dene+1050
0x0B82	0x0000 ;_dene+1052
0x0B84	0x0000 ;_dene+1054
0x0B86	0x0000 ;_dene+1056
0x0B88	0x0000 ;_dene+1058
0x0B8A	0x0000 ;_dene+1060
0x0B8C	0x0000 ;_dene+1062
0x0B8E	0x0000 ;_dene+1064
0x0B90	0x0000 ;_dene+1066
0x0B92	0x0000 ;_dene+1068
0x0B94	0x0000 ;_dene+1070
0x0B96	0x0000 ;_dene+1072
0x0B98	0x0000 ;_dene+1074
0x0B9A	0x0000 ;_dene+1076
0x0B9C	0x0000 ;_dene+1078
0x0B9E	0x0000 ;_dene+1080
0x0BA0	0x40C0 ;_dene+1082
0x0BA2	0x03FC ;_dene+1084
0x0BA4	0x3FF0 ;_dene+1086
0x0BA6	0x0080 ;_dene+1088
0x0BA8	0x0000 ;_dene+1090
0x0BAA	0x0000 ;_dene+1092
0x0BAC	0xE000 ;_dene+1094
0x0BAE	0xFE43 ;_dene+1096
0x0BB0	0xF80F ;_dene+1098
0x0BB2	0xC07F ;_dene+1100
0x0BB4	0x0000 ;_dene+1102
0x0BB6	0x0000 ;_dene+1104
0x0BB8	0x0000 ;_dene+1106
0x0BBA	0x47E0 ;_dene+1108
0x0BBC	0x1E87 ;_dene+1110
0x0BBE	0x701C ;_dene+1112
0x0BC0	0x00E0 ;_dene+1114
0x0BC2	0x0000 ;_dene+1116
0x0BC4	0x0000 ;_dene+1118
0x0BC6	0xF000 ;_dene+1120
0x0BC8	0x014E ;_dene+1122
0x0BCA	0x0E98 ;_dene+1124
0x0BCC	0x6060 ;_dene+1126
0x0BCE	0x0000 ;_dene+1128
0x0BD0	0x0000 ;_dene+1130
0x0BD2	0x0000 ;_dene+1132
0x0BD4	0x46F8 ;_dene+1134
0x0BD6	0x9801 ;_dene+1136
0x0BD8	0x6006 ;_dene+1138
0x0BDA	0x0060 ;_dene+1140
0x0BDC	0x0000 ;_dene+1142
0x0BDE	0x0000 ;_dene+1144
0x0BE0	0xDC00 ;_dene+1146
0x0BE2	0x004C ;_dene+1148
0x0BE4	0x02B0 ;_dene+1150
0x0BE6	0x6060 ;_dene+1152
0x0BE8	0x0000 ;_dene+1154
0x0BEA	0x0000 ;_dene+1156
0x0BEC	0x0000 ;_dene+1158
0x0BEE	0x4CCE ;_dene+1160
0x0BF0	0xF001 ;_dene+1162
0x0BF2	0x2003 ;_dene+1164
0x0BF4	0x00E0 ;_dene+1166
0x0BF6	0x0000 ;_dene+1168
0x0BF8	0x0000 ;_dene+1170
0x0BFA	0xC600 ;_dene+1172
0x0BFC	0x01CC ;_dene+1174
0x0BFE	0x06F0 ;_dene+1176
0x0C00	0xC061 ;_dene+1178
0x0C02	0x0000 ;_dene+1180
0x0C04	0x0000 ;_dene+1182
0x0C06	0x0000 ;_dene+1184
0x0C08	0xC6C7 ;_dene+1186
0x0C0A	0xB801 ;_dene+1188
0x0C0C	0x6106 ;_dene+1190
0x0C0E	0x00C0 ;_dene+1192
0x0C10	0x0000 ;_dene+1194
0x0C12	0x0000 ;_dene+1196
0x0C14	0xC300 ;_dene+1198
0x0C16	0x03C7 ;_dene+1200
0x0C18	0x1E9C ;_dene+1202
0x0C1A	0xC061 ;_dene+1204
0x0C1C	0x0000 ;_dene+1206
0x0C1E	0x0000 ;_dene+1208
0x0C20	0x0000 ;_dene+1210
0x0C22	0xC3C1 ;_dene+1212
0x0C24	0x0E87 ;_dene+1214
0x0C26	0x601C ;_dene+1216
0x0C28	0x00E0 ;_dene+1218
0x0C2A	0x0000 ;_dene+1220
0x0C2C	0x0000 ;_dene+1222
0x0C2E	0xC000 ;_dene+1224
0x0C30	0xFEC1 ;_dene+1226
0x0C32	0xF807 ;_dene+1228
0x0C34	0x6060 ;_dene+1230
0x0C36	0x0000 ;_dene+1232
0x0C38	0x0000 ;_dene+1234
0x0C3A	0x0000 ;_dene+1236
0x0C3C	0x40C0 ;_dene+1238
0x0C3E	0x09F8 ;_dene+1240
0x0C40	0x20E0 ;_dene+1242
0x0C42	0x0020 ;_dene+1244
0x0C44	0x0000 ;_dene+1246
0x0C46	0x0000 ;_dene+1248
0x0C48	0x0000 ;_dene+1250
0x0C4A	0x0000 ;_dene+1252
0x0C4C	0x0000 ;_dene+1254
0x0C4E	0x0000 ;_dene+1256
0x0C50	0x0000 ;_dene+1258
0x0C52	0x0000 ;_dene+1260
0x0C54	0x0000 ;_dene+1262
0x0C56	0x0000 ;_dene+1264
0x0C58	0x0000 ;_dene+1266
0x0C5A	0x0000 ;_dene+1268
0x0C5C	0x0000 ;_dene+1270
0x0C5E	0x0000 ;_dene+1272
0x0C60	0x0000 ;_dene+1274
0x0C62	0x0000 ;_dene+1276
0x0C64	0x0000 ;_dene+1278
0x0C66	0x0000 ;_dene+1280
0x0C68	0x0000 ;_dene+1282
0x0C6A	0x0000 ;_dene+1284
0x0C6C	0x0000 ;_dene+1286
0x0C6E	0x0000 ;_dene+1288
0x0C70	0x0000 ;_dene+1290
0x0C72	0x0000 ;_dene+1292
0x0C74	0x0000 ;_dene+1294
0x0C76	0x0000 ;_dene+1296
0x0C78	0x0000 ;_dene+1298
; end of _dene
;fdene.c,214 :: _Rcmd1
0x0C7A	0x010F ;_Rcmd1+0
0x0C7C	0x9680 ;_Rcmd1+2
0x0C7E	0x8011 ;_Rcmd1+4
0x0C80	0xB1FF ;_Rcmd1+6
0x0C82	0x0103 ;_Rcmd1+8
0x0C84	0x2D2C ;_Rcmd1+10
0x0C86	0x03B2 ;_Rcmd1+12
0x0C88	0x2C01 ;_Rcmd1+14
0x0C8A	0xB32D ;_Rcmd1+16
0x0C8C	0x0106 ;_Rcmd1+18
0x0C8E	0x2D2C ;_Rcmd1+20
0x0C90	0x2C01 ;_Rcmd1+22
0x0C92	0xB42D ;_Rcmd1+24
0x0C94	0x0701 ;_Rcmd1+26
0x0C96	0x03C0 ;_Rcmd1+28
0x0C98	0x02A2 ;_Rcmd1+30
0x0C9A	0xC184 ;_Rcmd1+32
0x0C9C	0xC501 ;_Rcmd1+34
0x0C9E	0x02C2 ;_Rcmd1+36
0x0CA0	0x000A ;_Rcmd1+38
0x0CA2	0x02C3 ;_Rcmd1+40
0x0CA4	0x2A8A ;_Rcmd1+42
0x0CA6	0x02C4 ;_Rcmd1+44
0x0CA8	0xEE8A ;_Rcmd1+46
0x0CAA	0x01C5 ;_Rcmd1+48
0x0CAC	0x200E ;_Rcmd1+50
0x0CAE	0x3600 ;_Rcmd1+52
0x0CB0	0xC801 ;_Rcmd1+54
0x0CB2	0x013A ;_Rcmd1+56
0x0CB4	0x05 ;_Rcmd1+58
; end of _Rcmd1
;fdene.c,287 :: _Rcmd3
0x0CB5	0xE004 ;_Rcmd3+0
0x0CB7	0x0210 ;_Rcmd3+2
0x0CB9	0x071C ;_Rcmd3+4
0x0CBB	0x3712 ;_Rcmd3+6
0x0CBD	0x2932 ;_Rcmd3+8
0x0CBF	0x292D ;_Rcmd3+10
0x0CC1	0x2B25 ;_Rcmd3+12
0x0CC3	0x0039 ;_Rcmd3+14
0x0CC5	0x0301 ;_Rcmd3+16
0x0CC7	0xE110 ;_Rcmd3+18
0x0CC9	0x0310 ;_Rcmd3+20
0x0CCB	0x071D ;_Rcmd3+22
0x0CCD	0x2E06 ;_Rcmd3+24
0x0CCF	0x292C ;_Rcmd3+26
0x0CD1	0x2E2D ;_Rcmd3+28
0x0CD3	0x372E ;_Rcmd3+30
0x0CD5	0x003F ;_Rcmd3+32
0x0CD7	0x0200 ;_Rcmd3+34
0x0CD9	0x1310 ;_Rcmd3+36
0x0CDB	0x0A80 ;_Rcmd3+38
0x0CDD	0x8029 ;_Rcmd3+40
0x0CDF	0x64 ;_Rcmd3+42
; end of _Rcmd3
;fdene.c,0 :: ?ICS_rotation
0x0CE0	0x00 ;?ICS_rotation+0
; end of ?ICS_rotation
;fdene.c,0 :: ?ICS__colstart
0x0CE1	0x00 ;?ICS__colstart+0
; end of ?ICS__colstart
;fdene.c,0 :: ?ICS__rowstart
0x0CE2	0x00 ;?ICS__rowstart+0
; end of ?ICS__rowstart
;fdene.c,0 :: ?ICS__ystart
0x0CE3	0x00 ;?ICS__ystart+0
; end of ?ICS__ystart
;fdene.c,0 :: ?ICS__xstart
0x0CE4	0x00 ;?ICS__xstart+0
; end of ?ICS__xstart
;fdene.c,0 :: ?ICS_wrap
0x0CE5	0x01 ;?ICS_wrap+0
; end of ?ICS_wrap
;__Lib_FT5XX6.c,0 :: ?ICS__Lib_FT5XX6_OrientPrototype3
0x0CE6	0x0048 ;?ICS__Lib_FT5XX6_OrientPrototype3+0
0x0CE8	0x0047 ;?ICS__Lib_FT5XX6_OrientPrototype3+2
0x0CEA	0x0049 ;?ICS__Lib_FT5XX6_OrientPrototype3+4
0x0CEC	0x003E ;?ICS__Lib_FT5XX6_OrientPrototype3+6
; end of ?ICS__Lib_FT5XX6_OrientPrototype3
;__Lib_FT5XX6.c,0 :: ?ICS__Lib_FT5XX6_OrientPrototype2
0x0CEE	0x0047 ;?ICS__Lib_FT5XX6_OrientPrototype2+0
0x0CF0	0x0049 ;?ICS__Lib_FT5XX6_OrientPrototype2+2
0x0CF2	0x003E ;?ICS__Lib_FT5XX6_OrientPrototype2+4
0x0CF4	0x0048 ;?ICS__Lib_FT5XX6_OrientPrototype2+6
; end of ?ICS__Lib_FT5XX6_OrientPrototype2
;__Lib_FT5XX6.c,0 :: ?ICS__Lib_FT5XX6_OrientPrototype1
0x0CF6	0x0049 ;?ICS__Lib_FT5XX6_OrientPrototype1+0
0x0CF8	0x003E ;?ICS__Lib_FT5XX6_OrientPrototype1+2
0x0CFA	0x0048 ;?ICS__Lib_FT5XX6_OrientPrototype1+4
0x0CFC	0x0047 ;?ICS__Lib_FT5XX6_OrientPrototype1+6
; end of ?ICS__Lib_FT5XX6_OrientPrototype1
;__Lib_FT5XX6.c,0 :: ?ICS__Lib_FT5XX6_OrientPrototype0
0x0CFE	0x003E ;?ICS__Lib_FT5XX6_OrientPrototype0+0
0x0D00	0x0048 ;?ICS__Lib_FT5XX6_OrientPrototype0+2
0x0D02	0x0047 ;?ICS__Lib_FT5XX6_OrientPrototype0+4
0x0D04	0x0049 ;?ICS__Lib_FT5XX6_OrientPrototype0+6
; end of ?ICS__Lib_FT5XX6_OrientPrototype0
;fdene.c,260 :: _Rcmd2red
0x0D06	0x2A02 ;_Rcmd2red+0
0x0D08	0x0004 ;_Rcmd2red+2
0x0D0A	0x0000 ;_Rcmd2red+4
0x0D0C	0x2B7F ;_Rcmd2red+6
0x0D0E	0x0004 ;_Rcmd2red+8
0x0D10	0x0000 ;_Rcmd2red+10
0x0D12	0x9F ;_Rcmd2red+12
; end of _Rcmd2red
;fdene.c,251 :: _Rcmd2green
0x0D13	0x2A02 ;_Rcmd2green+0
0x0D15	0x0004 ;_Rcmd2green+2
0x0D17	0x0002 ;_Rcmd2green+4
0x0D19	0x2B81 ;_Rcmd2green+6
0x0D1B	0x0004 ;_Rcmd2green+8
0x0D1D	0x0001 ;_Rcmd2green+10
0x0D1F	0xA0 ;_Rcmd2green+12
; end of _Rcmd2green
;fdene.c,269 :: _Rcmd2green144
0x0D20	0x2A02 ;_Rcmd2green144+0
0x0D22	0x0004 ;_Rcmd2green144+2
0x0D24	0x0000 ;_Rcmd2green144+4
0x0D26	0x2B7F ;_Rcmd2green144+6
0x0D28	0x0004 ;_Rcmd2green144+8
0x0D2A	0x0000 ;_Rcmd2green144+10
0x0D2C	0x7F ;_Rcmd2green144+12
; end of _Rcmd2green144
;fdene.c,278 :: _Rcmd2green160x80
0x0D2D	0x2A02 ;_Rcmd2green160x80+0
0x0D2F	0x0004 ;_Rcmd2green160x80+2
0x0D31	0x0000 ;_Rcmd2green160x80+4
0x0D33	0x2B7F ;_Rcmd2green160x80+6
0x0D35	0x0004 ;_Rcmd2green160x80+8
0x0D37	0x0000 ;_Rcmd2green160x80+10
0x0D39	0x9F ;_Rcmd2green160x80+12
; end of _Rcmd2green160x80
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [18]    _SPI1_Write
0x002E      [12]    _writeCommand
0x003A      [94]    _setAddrWindow
0x0098       [4]    _startWrite
0x009C       [4]    _endWrite
0x00A0      [80]    _Mul_16X16_U
0x00F0     [228]    _fillRect
0x01D4      [60]    _drawPixel
0x0210     [280]    _displayInit
0x0328     [384]    _setRotation
0x04A8      [16]    ___CC2DW
0x04B8      [50]    _SPI1_Init
0x04EA     [302]    _tft_initR
0x0618       [6]    _display_setTextWrap
0x061E      [26]    _fillScreen
0x0638     [210]    _display_drawBitmapV2
0x070A      [92]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0000       [1]    UART2_Init_tmp_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    SPI2_Write_tmp_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [1]    ispunct_rslt_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    __Lib_TFT_16bit_JPEG_FileReadBytes_Result_L0
0x0001       [1]    __Lib_Conversions_Adjust_Hex_tmp_L0
0x0001       [1]    ?FLOC___display_setTextSizeT449
0x0001       [1]    __Lib_TFT_JPEG_FileReadBytes_Result_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0001       [1]    FLASH_Write_64_i_L0
0x0001       [1]    __Lib_TFT_JPEG_FileRead_i_L0
0x0001       [1]    UART2_Read___tmp_UART2_Read_L0
0x0001       [1]    R1
0x0001       [1]    __Lib_TFT_16bit_JPEG_FileRead_i_L0
0x0002       [2]    strlen_cp_L0
0x0002       [2]    memset_pp_L0
0x0002       [1]    FLASH_Write_64_SaveINTCON_L0
0x0002       [2]    FT5XX6_GetGestureIndex_i_L0
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0002       [1]    R2
0x0002       [2]    memchr_s_L0
0x0002       [2]    memcpy_dd_L0
0x0003       [1]    MM_Init_i_L0
0x0003       [2]    memmove_tt_L0
0x0003       [2]    Ltrim_original_L0
0x0003       [2]    MM_TotalFreeMemSize_Tot_L0
0x0003       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT29
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0003       [1]    R3
0x0003       [2]    __Lib_MmcFat16_f16_toInt_l_L0
0x0004       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT40
0x0004       [2]    strcat_cp_L0
0x0004       [2]    __Lib_MemManager_MM_GetMemAlign_P_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [2]    frexp_pom_L0
0x0004       [1]    R4
0x0004       [2]    strncat_cp_L0
0x0005       [2]    LongWordToHex_input_half_L0
0x0005       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT54
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [2]    Ltrim_p_L0
0x0005       [2]    memmove_ff_L0
0x0005       [1]    MM_TotalFreeMemSize_i_L0
0x0005       [1]    R5
0x0006       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT69
0x0006       [1]    __Lib_MemManager_MM_GetMemAlign_i_L0
0x0006       [1]    R6
0x0007       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bLength_L0
0x0007       [1]    R7
0x0007       [1]    __Lib_TFT_16bit_JPEG_GenerateHuffmanTables_bLength_L0
0x0008       [1]    __Lib_TFT_16bit_JPEG_GenerateHuffmanTables_bTable_L0
0x0008       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bTable_L0
0x0008       [1]    R8
0x0009       [4]    __Lib_MmcFat16_f16_toLong_l_L0
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [1]    _rotation
0x0016       [1]    __colstart
0x0017       [1]    __rowstart
0x0018       [1]    __ystart
0x0019       [1]    __xstart
0x001A       [1]    _wrap
0x001B       [8]    __Lib_FT5XX6_OrientPrototype3
0x0023       [8]    __Lib_FT5XX6_OrientPrototype2
0x002B       [8]    __Lib_FT5XX6_OrientPrototype1
0x0033       [8]    __Lib_FT5XX6_OrientPrototype0
0x003B       [1]    _tabcolor
0x003C       [1]    __height
0x003D       [1]    __width
0x003E       [1]    _ft5xx6_gest_move_up
0x003F       [4]    _SPI_Wr_Ptr
0x0043       [4]    _SPI_Rd_Ptr
0x0047       [1]    _ft5xx6_gest_move_down
0x0048       [1]    _ft5xx6_gest_move_right
0x0049       [1]    _ft5xx6_gest_move_left
0x004A       [2]    FARG_fillScreen_color
0x004A       [1]    FARG_tft_initR_options
0x004A       [1]    FARG_display_setTextWrap_w
0x004A       [2]    FARG_display_drawBitmapV2_x
0x004C       [2]    FARG_display_drawBitmapV2_y
0x004E       [3]    FARG_display_drawBitmapV2_bitmap
0x0051       [2]    FARG_display_drawBitmapV2_w
0x0053       [2]    FARG_display_drawBitmapV2_h
0x0055       [2]    FARG_display_drawBitmapV2_color
0x0057       [2]    display_drawBitmapV2_byteWidth_L0
0x0059       [2]    display_drawBitmapV2_i_L0
0x005B       [2]    display_drawBitmapV2_j_L0
0x005D       [1]    display_drawBitmapV2__byte_L0
0x005E       [1]    displayInit_numCommands_L0
0x005E       [1]    fillRect_hi_L1
0x005E       [1]    FARG_setRotation_m
0x005F       [1]    displayInit_numArgs_L0
0x005F       [1]    fillRect_lo_L1
0x005F       [1]    ?FLOC___setRotationT52
0x0060       [1]    setRotation_madctl_L0
0x0061       [1]    FARG_drawPixel_x
0x0061       [3]    FARG_displayInit_addr
0x0061       [1]    FARG_fillRect_x
0x0062       [1]    FARG_drawPixel_y
0x0062       [1]    FARG_fillRect_y
0x0063       [2]    FARG_drawPixel_color
0x0063       [1]    FARG_fillRect_w
0x0064       [1]    FARG_fillRect_h
0x0064       [2]    displayInit_ms_L0
0x0065       [2]    FARG_fillRect_color
0x0067       [2]    fillRect_px_L0
0x0069       [1]    FARG_setAddrWindow_x
0x006A       [1]    FARG_setAddrWindow_y
0x006B       [1]    FARG_setAddrWindow_w
0x006C       [1]    FARG_setAddrWindow_h
0x006D       [1]    FARG_writeCommand_cmd
0x006E       [1]    FARG_SPI1_Write_data_
0x0F3A       [1]    ANSELC
0x0F3B       [1]    ANSELD
0x0F83       [0]    RD0_bit
0x0F83       [0]    RD2_bit
0x0F83       [0]    RD1_bit
0x0F94       [0]    TRISC5_bit
0x0F94       [0]    TRISC3_bit
0x0F94       [0]    TRISC4_bit
0x0F95       [0]    TRISD1_bit
0x0F95       [0]    TRISD0_bit
0x0F95       [0]    TRISD2_bit
0x0FC6       [1]    SSP1CON1
0x0FC7       [1]    SSP1STAT
0x0FC9       [1]    SSP1BUF
0x0FD3       [1]    OSCCON
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [3]    TBLPTR
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x0766    [1300]    _dene
0x0C7A      [59]    _Rcmd1
0x0CB5      [43]    _Rcmd3
0x0CE0       [1]    ?ICS_rotation
0x0CE1       [1]    ?ICS__colstart
0x0CE2       [1]    ?ICS__rowstart
0x0CE3       [1]    ?ICS__ystart
0x0CE4       [1]    ?ICS__xstart
0x0CE5       [1]    ?ICS_wrap
0x0CE6       [8]    ?ICS__Lib_FT5XX6_OrientPrototype3
0x0CEE       [8]    ?ICS__Lib_FT5XX6_OrientPrototype2
0x0CF6       [8]    ?ICS__Lib_FT5XX6_OrientPrototype1
0x0CFE       [8]    ?ICS__Lib_FT5XX6_OrientPrototype0
0x0D06      [13]    _Rcmd2red
0x0D13      [13]    _Rcmd2green
0x0D20      [13]    _Rcmd2green144
0x0D2D      [13]    _Rcmd2green160x80
